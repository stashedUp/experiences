{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Experiences Learn more about my experiences, successes and goals This site to help interviewers follow along as I describe my experiences, goals and aspirations.","title":"Experiences"},{"location":"#experiences","text":"","title":"Experiences"},{"location":"#learn-more-about-my-experiences-successes-and-goals","text":"This site to help interviewers follow along as I describe my experiences, goals and aspirations.","title":"Learn more about my experiences, successes and goals"},{"location":"AboutMe/","text":"Walk me through your resume? Tell me about yourself. [SCHOOL] I actually went to school to study Actuarial Science. My parent wanted me to be an actuary. While in college,I took several CS classes and really enjoyed it. When I graduated I had an acturial and computer science degree. WHen it came to pick a job, I chose to be a software engineer My parents used think I fix computers & printers all day. Years later, my dad called me and asked me if I knew what an algorithm is I guess he figured out that I write computer code [SOFTWARE-ENGINEER]I joined Pearson as a backend Software Engineer. At that time, we were still in the data center. Later, I heard that we were moving to the cloud. I had a lot of ideas about how we should build our infrastructure. Rather than working as a developer, I wanted to build a better infrastructure. and I was interested learning linux and networking [DEV-OPS] In the DevOPs role, I moved our application from the data center to AWS. Once, at a conference and I learned about microservices and containers. I decided to experiment by taking a product that I manage and move it into a container. I revamped the pipeline and rebuild the build job to include functional testing with docker-compose The infrastructure that I built became a model for other products at Pearson. [SRE] A few years later, I was at another conference and I learned about distributed systems. I proposed to my manager that we should sit with the developer, understand their workflow and build the infrastructure with the development team. Right about that time, Pearson transitioned me to a SRE role. Right now I am team lead, I do mixture of coding and leading. And a lot of teaching and mentoring. I set long term goals and make sure that my team is on the right path","title":"Walk me through your resume? Tell me about yourself."},{"location":"AboutMe/#walk-me-through-your-resume-tell-me-about-yourself","text":"[SCHOOL] I actually went to school to study Actuarial Science. My parent wanted me to be an actuary. While in college,I took several CS classes and really enjoyed it. When I graduated I had an acturial and computer science degree. WHen it came to pick a job, I chose to be a software engineer My parents used think I fix computers & printers all day. Years later, my dad called me and asked me if I knew what an algorithm is I guess he figured out that I write computer code [SOFTWARE-ENGINEER]I joined Pearson as a backend Software Engineer. At that time, we were still in the data center. Later, I heard that we were moving to the cloud. I had a lot of ideas about how we should build our infrastructure. Rather than working as a developer, I wanted to build a better infrastructure. and I was interested learning linux and networking [DEV-OPS] In the DevOPs role, I moved our application from the data center to AWS. Once, at a conference and I learned about microservices and containers. I decided to experiment by taking a product that I manage and move it into a container. I revamped the pipeline and rebuild the build job to include functional testing with docker-compose The infrastructure that I built became a model for other products at Pearson. [SRE] A few years later, I was at another conference and I learned about distributed systems. I proposed to my manager that we should sit with the developer, understand their workflow and build the infrastructure with the development team. Right about that time, Pearson transitioned me to a SRE role. Right now I am team lead, I do mixture of coding and leading. And a lot of teaching and mentoring. I set long term goals and make sure that my team is on the right path","title":"Walk me through your resume? Tell me about yourself."},{"location":"Apple/","text":"How you would contribute at Apple I understand the scope of this role. I will be helping build APIs for developers within Apple to access the storage system. Coming from a Site Reliability Engineering background, I bring diversity to the team. I bring experience in not only writing code but also building, testing and deploying large scale software This includes my knowledge in linux internals and networking In my previous interviews, I have showed examples of how I have implemented standards and best practices in releasing software I enjoy developing tools or services that help developers and system administrators I do this at my current role at Pearson, and with my open source projects At Apple, I know that I will have to maintain and develop at the same time. And I need to find time in-between to innovate. During the interview, I enjoyed talking to the engineers from different departments. They all seem passionate and eager to help. I cannot wait to work at a place where creative exchange of ideas happen. Not where people do the bare minimum I\u2019ve always enjoyed solving hard problems and at Apple they solve hard problems. That's the itch I'm trying to scratch. In this role I get the opportunity to solve hard problems. github.com/warrensbox How you take initiative and drive projects forward As engineers, we break things and put them together. I am always curious if we can take apart something complex and make it better. I am someone who embraces the culture of experimentation. I treat everything as an experiment - there are no failed experiments, only failed hyphothesis If things don't work, we change the parameters and try again. I consider myself as a creative person. I push myself to think out of the box and try to see things from different angles. These 3 traits make me care about the code I am writing. To show initiaitve, you must first care about the work you are doing. I hate the concept of the one man army - where one person builts the entire codebase and everyone else is suppose to simply use it. What happens if this person leaves the company or gets hit by a bus. I also hate the concept of tribal knowledge. Tribalism within the workplace can be damaging to companies, and kill off any chance of a cross functional collaboration strategy. When I take initiative, I incorporate the entire team. I have a workflow that I follow and make sure that my entire team in involve. I delegate task to encourage participation. Link : diagram There are 3 traits that define me curiosity As engineers, we break things and put them together, I am always curious if we can take apart something complex and make it better I am curious to learn about how things work even if it's not related to my domain I apply this sense of wonder and curiousity in my daily software industry life experimentator I don't know if this is the right term - but someone who embraces the culture of experimentation I am willing to try and fail, rather than not trying at all I treat everything as an experiment - there are no failed experiments, only failed hyphothesis If things don't work, we change the parameters and try again creativity I push myself to think out of the box and try to see things from different angles I enjoy meeting people with different backgounds and see how differently they approach similar problems I truly believe innovation is when arts meets engineering","title":"How you would contribute at Apple"},{"location":"Apple/#how-you-would-contribute-at-apple","text":"I understand the scope of this role. I will be helping build APIs for developers within Apple to access the storage system. Coming from a Site Reliability Engineering background, I bring diversity to the team. I bring experience in not only writing code but also building, testing and deploying large scale software This includes my knowledge in linux internals and networking In my previous interviews, I have showed examples of how I have implemented standards and best practices in releasing software I enjoy developing tools or services that help developers and system administrators I do this at my current role at Pearson, and with my open source projects At Apple, I know that I will have to maintain and develop at the same time. And I need to find time in-between to innovate. During the interview, I enjoyed talking to the engineers from different departments. They all seem passionate and eager to help. I cannot wait to work at a place where creative exchange of ideas happen. Not where people do the bare minimum I\u2019ve always enjoyed solving hard problems and at Apple they solve hard problems. That's the itch I'm trying to scratch. In this role I get the opportunity to solve hard problems. github.com/warrensbox","title":"How you would contribute at Apple"},{"location":"Apple/#how-you-take-initiative-and-drive-projects-forward","text":"As engineers, we break things and put them together. I am always curious if we can take apart something complex and make it better. I am someone who embraces the culture of experimentation. I treat everything as an experiment - there are no failed experiments, only failed hyphothesis If things don't work, we change the parameters and try again. I consider myself as a creative person. I push myself to think out of the box and try to see things from different angles. These 3 traits make me care about the code I am writing. To show initiaitve, you must first care about the work you are doing. I hate the concept of the one man army - where one person builts the entire codebase and everyone else is suppose to simply use it. What happens if this person leaves the company or gets hit by a bus. I also hate the concept of tribal knowledge. Tribalism within the workplace can be damaging to companies, and kill off any chance of a cross functional collaboration strategy. When I take initiative, I incorporate the entire team. I have a workflow that I follow and make sure that my entire team in involve. I delegate task to encourage participation. Link : diagram","title":"How you take initiative and drive projects forward"},{"location":"Apple/#there-are-3-traits-that-define-me","text":"","title":"There are 3 traits that define me"},{"location":"Apple/#curiosity","text":"As engineers, we break things and put them together, I am always curious if we can take apart something complex and make it better I am curious to learn about how things work even if it's not related to my domain I apply this sense of wonder and curiousity in my daily software industry life","title":"curiosity"},{"location":"Apple/#experimentator","text":"I don't know if this is the right term - but someone who embraces the culture of experimentation I am willing to try and fail, rather than not trying at all I treat everything as an experiment - there are no failed experiments, only failed hyphothesis If things don't work, we change the parameters and try again","title":"experimentator"},{"location":"Apple/#creativity","text":"I push myself to think out of the box and try to see things from different angles I enjoy meeting people with different backgounds and see how differently they approach similar problems I truly believe innovation is when arts meets engineering","title":"creativity"},{"location":"Beliefs/","text":"If you want to be original, you have to accept the uncertainty, even when it\u2019s uncomfortable Put smart, passionate people in a room together, charge them with identifying and solving problems, and encourage them to be candid","title":"Beliefs"},{"location":"BiggestTechincalChallenge/","text":"What is your biggest challenge and how did you solve it? Situation: This is situation is about supporting a team that is refusing to move to a newer technology stack. Task: As a team lead, onoe of the most challenging task that I had to do was to convince the development team to move to a different technology stack. In my case, we wanted to move from a managed EC2 cluster to a unmanaged EC2 cluster. I tried mentioning why we had to move verbally but it wasn't getting any traction. Things remained the same. Action: I did manage to convince the team to move to a different better stack and this is how I did it: - build python tool to show price comparison - build the entire environment to replicate the proposed change - build a pipeline to deploy app code in to the proposed env - show an extensive benefits vs disadvantes table SHOW DEMO (https://github.com/stashedUp/tomo-documenting-architecture-decisions)[HERE] Result: The development team was more inclind to move to the newer stack SRE and developer are working collaboratively to push the performance of the infrastucture. Lesson: It's often hard to move from one system that is currently working and has been working. But if we don't make the effort to progress and keep our application uptodate. It would become harder and harder to maintain it. It's important to see from the development team's perspective Showing price comparison and showing a proof on concept helps It shows the stakeholder that we have confident and it's not all theorical","title":"What is your biggest challenge and how did you solve it?"},{"location":"BiggestTechincalChallenge/#what-is-your-biggest-challenge-and-how-did-you-solve-it","text":"","title":"What is your biggest challenge and how did you solve it?"},{"location":"BiggestTechincalChallenge/#situation","text":"This is situation is about supporting a team that is refusing to move to a newer technology stack.","title":"Situation:"},{"location":"BiggestTechincalChallenge/#task","text":"As a team lead, onoe of the most challenging task that I had to do was to convince the development team to move to a different technology stack. In my case, we wanted to move from a managed EC2 cluster to a unmanaged EC2 cluster. I tried mentioning why we had to move verbally but it wasn't getting any traction. Things remained the same.","title":"Task:"},{"location":"BiggestTechincalChallenge/#action","text":"I did manage to convince the team to move to a different better stack and this is how I did it: - build python tool to show price comparison - build the entire environment to replicate the proposed change - build a pipeline to deploy app code in to the proposed env - show an extensive benefits vs disadvantes table SHOW DEMO (https://github.com/stashedUp/tomo-documenting-architecture-decisions)[HERE]","title":"Action:"},{"location":"BiggestTechincalChallenge/#result","text":"The development team was more inclind to move to the newer stack SRE and developer are working collaboratively to push the performance of the infrastucture.","title":"Result:"},{"location":"BiggestTechincalChallenge/#lesson","text":"It's often hard to move from one system that is currently working and has been working. But if we don't make the effort to progress and keep our application uptodate. It would become harder and harder to maintain it. It's important to see from the development team's perspective Showing price comparison and showing a proof on concept helps It shows the stakeholder that we have confident and it's not all theorical","title":"Lesson:"},{"location":"Closing/","text":"Closing Statements I see this as an opportunity to contribute to a forward-thinking company that is not only customer-experience driven but also engineering driven. I\u2019ve always enjoyed solving hard problems and Apple they solve hard problems. That's the itch I'm trying to scratch. Also, I want to be involved in something that would have significant impact on the world. At Apple, I know I will have the opportunity to invent something new that has never been invented before. With my drive and curiosity, I know I can bring your team to the next level. The only thing that I truly lack is opportunity. If you give me that, then I promise you, you'll never regret it. I am fast learner and hardworking. I know I can add value to your team in a short time. I have high standards and always go above and beyond to solve a problem.","title":"Closing Statements"},{"location":"Closing/#closing-statements","text":"I see this as an opportunity to contribute to a forward-thinking company that is not only customer-experience driven but also engineering driven. I\u2019ve always enjoyed solving hard problems and Apple they solve hard problems. That's the itch I'm trying to scratch. Also, I want to be involved in something that would have significant impact on the world. At Apple, I know I will have the opportunity to invent something new that has never been invented before. With my drive and curiosity, I know I can bring your team to the next level. The only thing that I truly lack is opportunity. If you give me that, then I promise you, you'll never regret it. I am fast learner and hardworking. I know I can add value to your team in a short time. I have high standards and always go above and beyond to solve a problem.","title":"Closing Statements"},{"location":"Collaboration/","text":"Cross-collaboration See diagram Cross-team collaboration discipline is not a one-off thing. It is an ongoing process that needs to be a part of the company\u2019s work culture. Align project goals and share them with everyone When there is a lack of clarity and alignment in the team, you will start seeing even more problems when you try to break the work down into different tasks and assign them to the members. Each team member would handle the task with a different goal in mind, which will eventually lead the team to nowhere To avoid situations like these, it is important for cross-functional teams to discuss the important goals before starting the work and make sure they align with the overall company goals as well as the goals set up by the different departments. Establish a centralized communication method make sure there is a centralized way for teams to communicate. Communication is one of the most important parts of any type of cross-team interaction. Without good cross-team communication, collaboration falls apart Assign a single point of contact for each team - Establish structure at the very beginning ensure there's only one contact person on both sides. This avoids confusion on different directions from the client, eliminates overlap of tasks, and helps in managing expectation Promoting diversity Diversity, of any kind, is a positive element to teamwork. With an assortment of different professional experiences and skill sets on hand, it can provide the necessary tools and paths to tackle the problem in an inventive way. Eliminating tribalism (tribal knowledge) Tribalism within the workplace can be damaging to companies, and kill off any chance of a cross functional collaboration strategy. Don\u2019t be afraid to experiment Cross-functional teams come in all sorts of shapes and sizes, which means there will be all sorts of methods that will help boost collaboration. So, when it comes to finding the perfect formula for your team, remember it\u2019s all about trial and error. Celebrate as a Team","title":"Collaboration"},{"location":"Collaboration/#cross-collaboration","text":"See diagram Cross-team collaboration discipline is not a one-off thing. It is an ongoing process that needs to be a part of the company\u2019s work culture. Align project goals and share them with everyone When there is a lack of clarity and alignment in the team, you will start seeing even more problems when you try to break the work down into different tasks and assign them to the members. Each team member would handle the task with a different goal in mind, which will eventually lead the team to nowhere To avoid situations like these, it is important for cross-functional teams to discuss the important goals before starting the work and make sure they align with the overall company goals as well as the goals set up by the different departments. Establish a centralized communication method make sure there is a centralized way for teams to communicate. Communication is one of the most important parts of any type of cross-team interaction. Without good cross-team communication, collaboration falls apart Assign a single point of contact for each team - Establish structure at the very beginning ensure there's only one contact person on both sides. This avoids confusion on different directions from the client, eliminates overlap of tasks, and helps in managing expectation Promoting diversity Diversity, of any kind, is a positive element to teamwork. With an assortment of different professional experiences and skill sets on hand, it can provide the necessary tools and paths to tackle the problem in an inventive way. Eliminating tribalism (tribal knowledge) Tribalism within the workplace can be damaging to companies, and kill off any chance of a cross functional collaboration strategy. Don\u2019t be afraid to experiment Cross-functional teams come in all sorts of shapes and sizes, which means there will be all sorts of methods that will help boost collaboration. So, when it comes to finding the perfect formula for your team, remember it\u2019s all about trial and error. Celebrate as a Team","title":"Cross-collaboration"},{"location":"Conflict/","text":"Can you recall a time of conflict with a coworker? Can you recall a time you disagreed with someone? Tell me about a time you disagreed with your Manager. Situation: As a team lead, I sometimes have differing opinion than my manager My manager used to be a team lead, so he sometimes feel that know know the best way to deal with the issue My manager's approach is usually all sticks rather than carrots Problem: My manager wanted my team to always be responsive on Slack - somesort like a call center But I believe engineers need to focus, away from distractions Being always on Slack is a distraction Distractions and partial focus would lead to suboptimal work Solution: I sat down and meet my manager on a resolution I told him we need the engineers focus on their work with fewer distractions But he insisted that we should be reachable at all times I suggested that the \"on-call\" person of the week can take on the role of runner. That means if the dev team has unnplanned work, and when they ping my team on slack, the on-call person will respond I also suggested that the engineers use the focus emoji to let others know that they are in focus mode My manager was willing to compromise to that idea Impact: As an impact, with fewer distractions, my team felt they were much more productive Their code reviews show fewer errors Lesson: I told my manager that I have to learn and grow from my own experience I need to make my own mistakes and learn from them I should be able to experiment new ways and see what works or not The key here is to present your case from a logiacal perspective, do not let emotions or ego get in the way When I become a manager someday, I will in return let him or her try their own concepts/theories Key Takeaways - individual conflict: Study the problem and collect all available information Defining the problem: defining and clarifying all positions (What's my manager's position & my position) Sharing the information: making the information available to all Developing the action plan: getting commitment Implementing the work: taking action on the plan Following up: obtaining feedback on the implementation for the action plan Team conflict - between teams Study the problem and collect all available information Defining the problem: defining and clarifying all positions (What's my manager's position & my position) Sharing the information: making the information available to all Setting the appropriate priorities: developing working timelines Organizing the group: forming cross-functional problem-solving groups Developing the action plan: getting commitment Implementing the work: taking action on the plan Following up: obtaining feedback on the implementation for the action plan Thing to keep in mind while dealing with confrontation Pausing and thinking before reacting Building trust -Trying to understand the conflict motives Keeping the meeting under control Listening to all involved parties Maintaining a give-and-take attitude Being willing to say when you were wrong Not acting as a superman and leveling the discussion only once in a while","title":"Can you recall a time of conflict with a coworker?"},{"location":"Conflict/#can-you-recall-a-time-of-conflict-with-a-coworker","text":"","title":"Can you recall a time of conflict with a coworker?"},{"location":"Conflict/#can-you-recall-a-time-you-disagreed-with-someone","text":"","title":"Can you recall a time you disagreed with someone?"},{"location":"Conflict/#tell-me-about-a-time-you-disagreed-with-your-manager","text":"","title":"Tell me about a time you disagreed with your Manager."},{"location":"Conflict/#situation","text":"As a team lead, I sometimes have differing opinion than my manager My manager used to be a team lead, so he sometimes feel that know know the best way to deal with the issue My manager's approach is usually all sticks rather than carrots","title":"Situation:"},{"location":"Conflict/#problem","text":"My manager wanted my team to always be responsive on Slack - somesort like a call center But I believe engineers need to focus, away from distractions Being always on Slack is a distraction Distractions and partial focus would lead to suboptimal work","title":"Problem:"},{"location":"Conflict/#solution","text":"I sat down and meet my manager on a resolution I told him we need the engineers focus on their work with fewer distractions But he insisted that we should be reachable at all times I suggested that the \"on-call\" person of the week can take on the role of runner. That means if the dev team has unnplanned work, and when they ping my team on slack, the on-call person will respond I also suggested that the engineers use the focus emoji to let others know that they are in focus mode My manager was willing to compromise to that idea","title":"Solution:"},{"location":"Conflict/#impact","text":"As an impact, with fewer distractions, my team felt they were much more productive Their code reviews show fewer errors","title":"Impact:"},{"location":"Conflict/#lesson","text":"I told my manager that I have to learn and grow from my own experience I need to make my own mistakes and learn from them I should be able to experiment new ways and see what works or not The key here is to present your case from a logiacal perspective, do not let emotions or ego get in the way When I become a manager someday, I will in return let him or her try their own concepts/theories","title":"Lesson:"},{"location":"Conflict/#key-takeaways-individual-conflict","text":"Study the problem and collect all available information Defining the problem: defining and clarifying all positions (What's my manager's position & my position) Sharing the information: making the information available to all Developing the action plan: getting commitment Implementing the work: taking action on the plan Following up: obtaining feedback on the implementation for the action plan","title":"Key Takeaways - individual conflict:"},{"location":"Conflict/#team-conflict-between-teams","text":"Study the problem and collect all available information Defining the problem: defining and clarifying all positions (What's my manager's position & my position) Sharing the information: making the information available to all Setting the appropriate priorities: developing working timelines Organizing the group: forming cross-functional problem-solving groups Developing the action plan: getting commitment Implementing the work: taking action on the plan Following up: obtaining feedback on the implementation for the action plan","title":"Team conflict - between teams"},{"location":"Conflict/#thing-to-keep-in-mind-while-dealing-with-confrontation","text":"Pausing and thinking before reacting Building trust -Trying to understand the conflict motives Keeping the meeting under control Listening to all involved parties Maintaining a give-and-take attitude Being willing to say when you were wrong Not acting as a superman and leveling the discussion only once in a while","title":"Thing to keep in mind while dealing with confrontation"},{"location":"Criticism/","text":"Tell about a time you faced criticism on the job. How did you handle it? How do you deal with criticism constructively? How do you handle feedback? Situation Being a software developer, when you work for a company, the code you write does not belong to you. It belongs to person who paid you. Code is a \u201cproduct.\u201d Your task was to deliver the best code possible. But I do have short comings and blind spots. When I wrote code with the programming language that I am most comfortable with. In my case, I wrote in bash. I knew other languages, but for this instance, I mostly wrote in Bash. That's because most scripts are easier to run on jenkins. Problem/Task: While it was easy to script in Bash. It was not always easy for newer developers to understand Bash. I had many young developers in my team. My manager saw the younger developer struggling and suggested that I pick an easier language for the younger developers. Initially I disagreed with him because I thought the younger developers need to learn bash to keep up. It later hit me that my previous manager forced bash on me. And at that time, I didn't agree with him either. Solution/Action: Seen in that light, I decided to change my approach. I still felt that we should have some sort of standard and uniformity but maybe we should extend it to 3 languages. That way the hurdle or burden of entry is not too earl. ### Result - As a result, newer developers can contribute sooner. - Also, it make work fun since they feel like they are adding value to the company ### Lesson - It's important to see from the other point of view - See why developers are struggling - Treat everything as an experiment. There are no failures only failed hypothesis. We keep trying and experimenting until we get the desired outcome. When giving negative feedback: 5 ways to give criticism people actually want to hear Understand the psychology of feedback (and how it\u2019s going to impact the person receiving it) Reframe feedback as \u201cadvice\u201d or \u201cguidance\u201d Forget the sandwich method and focus on candor instead Be informative and focus on areas of improvement Continually work on building a culture of trust When receiving negative feedback: The Dos and Don\u2019ts of how to properly accept criticism Don\u2019t: React right away Don\u2019t: Take it personally Don\u2019t: Try to justify, deflect, or ignore it Don\u2019t: Always wait for others to offer up feedback Do: Take time to gather your thoughts and not get overwhelmed Do: Ask for explicit feedback and clarification Do: Set expectations for what kind of feedback you\u2019re looking for","title":"Tell about a time you faced criticism on the job. How did you handle it?"},{"location":"Criticism/#tell-about-a-time-you-faced-criticism-on-the-job-how-did-you-handle-it","text":"","title":"Tell about a time you faced criticism on the job. How did you handle it?"},{"location":"Criticism/#how-do-you-deal-with-criticism-constructively","text":"","title":"How do you deal with criticism constructively?"},{"location":"Criticism/#how-do-you-handle-feedback","text":"","title":"How do you handle feedback?"},{"location":"Criticism/#situation","text":"Being a software developer, when you work for a company, the code you write does not belong to you. It belongs to person who paid you. Code is a \u201cproduct.\u201d Your task was to deliver the best code possible. But I do have short comings and blind spots. When I wrote code with the programming language that I am most comfortable with. In my case, I wrote in bash. I knew other languages, but for this instance, I mostly wrote in Bash. That's because most scripts are easier to run on jenkins.","title":"Situation"},{"location":"Criticism/#problemtask","text":"While it was easy to script in Bash. It was not always easy for newer developers to understand Bash. I had many young developers in my team. My manager saw the younger developer struggling and suggested that I pick an easier language for the younger developers. Initially I disagreed with him because I thought the younger developers need to learn bash to keep up. It later hit me that my previous manager forced bash on me. And at that time, I didn't agree with him either.","title":"Problem/Task:"},{"location":"Criticism/#solutionaction","text":"Seen in that light, I decided to change my approach. I still felt that we should have some sort of standard and uniformity but maybe we should extend it to 3 languages. That way the hurdle or burden of entry is not too earl. ### Result - As a result, newer developers can contribute sooner. - Also, it make work fun since they feel like they are adding value to the company ### Lesson - It's important to see from the other point of view - See why developers are struggling - Treat everything as an experiment. There are no failures only failed hypothesis. We keep trying and experimenting until we get the desired outcome.","title":"Solution/Action:"},{"location":"Criticism/#when-giving-negative-feedback-5-ways-to-give-criticism-people-actually-want-to-hear","text":"Understand the psychology of feedback (and how it\u2019s going to impact the person receiving it) Reframe feedback as \u201cadvice\u201d or \u201cguidance\u201d Forget the sandwich method and focus on candor instead Be informative and focus on areas of improvement Continually work on building a culture of trust","title":"When giving negative feedback: 5 ways to give criticism people actually want to hear"},{"location":"Criticism/#when-receiving-negative-feedback-the-dos-and-donts-of-how-to-properly-accept-criticism","text":"Don\u2019t: React right away Don\u2019t: Take it personally Don\u2019t: Try to justify, deflect, or ignore it Don\u2019t: Always wait for others to offer up feedback Do: Take time to gather your thoughts and not get overwhelmed Do: Ask for explicit feedback and clarification Do: Set expectations for what kind of feedback you\u2019re looking for","title":"When receiving negative feedback: The Dos and Don\u2019ts of how to properly accept criticism"},{"location":"CustomerExperience/","text":"What do you do when you have two conflicting priorities and can only deliver one on time? What Would You Focus On: Fixing A Customer\u2019s Issue Or Making A Great Customer Experience? Tell me about a time you had multiple responsibilities to manage. How did you respond to this situation? Situation: I had a situation once where I had to chose between two priorities. The customer of a product we support are expected the release of a new feauture. On the infrastucture platform side, there was a bug that needed to be fixed and released. Problem: The customer wanted a new feature on top of what we already have for their application. But there was a bug with the operating system that we were using. I had to chose what I should work on immediately. Solution: I chose to work on fixing the bug first because it might have severe implication that we might not know of. Also, I think the customer trusted us with their information. I need to keep that trust. Otherwise, I am just adding more complexity to the existing complexity. Lesson: At the end of the day, we should always choose to protect the customer's information first, we should also maintain the existing features because that what drew our customers at the first place.","title":"What do you do when you have two conflicting priorities and can only deliver one on time?"},{"location":"CustomerExperience/#what-do-you-do-when-you-have-two-conflicting-priorities-and-can-only-deliver-one-on-time","text":"","title":"What do you do when you have two conflicting priorities and can only deliver one on time?"},{"location":"CustomerExperience/#what-would-you-focus-on-fixing-a-customers-issue-or-making-a-great-customer-experience","text":"","title":"What Would You Focus On: Fixing A Customer\u2019s Issue Or Making A Great Customer Experience?"},{"location":"CustomerExperience/#tell-me-about-a-time-you-had-multiple-responsibilities-to-manage-how-did-you-respond-to-this-situation","text":"","title":"Tell me about a time you had multiple responsibilities to manage. How did you respond to this situation?"},{"location":"CustomerExperience/#situation","text":"I had a situation once where I had to chose between two priorities. The customer of a product we support are expected the release of a new feauture. On the infrastucture platform side, there was a bug that needed to be fixed and released.","title":"Situation:"},{"location":"CustomerExperience/#problem","text":"The customer wanted a new feature on top of what we already have for their application. But there was a bug with the operating system that we were using. I had to chose what I should work on immediately.","title":"Problem:"},{"location":"CustomerExperience/#solution","text":"I chose to work on fixing the bug first because it might have severe implication that we might not know of. Also, I think the customer trusted us with their information. I need to keep that trust. Otherwise, I am just adding more complexity to the existing complexity.","title":"Solution:"},{"location":"CustomerExperience/#lesson","text":"At the end of the day, we should always choose to protect the customer's information first, we should also maintain the existing features because that what drew our customers at the first place.","title":"Lesson:"},{"location":"Dateline/","text":"Tell me about a time where you delivered a project late. When was the last time you were unable to deliver within the timeframe originally specified? What happens when you realize you will be unable to deliver by the set deadline? Situation: In this example, I am suppose to migrate a small application from the data center to AWS. This application is mostly used by an internal team. Problem: Since I have migrated a couple of products in the past. I figured I would take a shorter time. So, then the Project Manager requested for a dateline. I provided an underestimated timeline. As I started working on the project, I realized that the team that I am working with does not have docker experience. So, they do not know how to contanerize their application. This is awhile ago - and this team were only used to building monolithic applications. Solution: I ended up having to learn about their application, teaching them about docker and providing sample docker files. This wasn't enough. I also had to actuallly write their docker files - including create a small testing suite using docker compose. All this ultimately cost a lot of time and effor and I missed the dateline. Lesson: From this experience, I have learned not to be optimistic about setting dateline. I admit I was wrong and I should have communicated with the product team, understand their needs and technology shortcomings. Communication was key, and overconfidence can be detrimental. Going forward, I spent a lot more time understanding the product workflow, technology debt of the team I am working with and setting up realistic timelines. I rather be honest than provide a superficial timeline. Without a realistic deadline, the team can feel burnout and deliver subpar work. Impact: So the impact from this experience is that, most of my future project have better dateline and I set better, more organized timeline for myself and my team in general.","title":"Tell me about a time where you delivered a project late."},{"location":"Dateline/#tell-me-about-a-time-where-you-delivered-a-project-late","text":"","title":"Tell me about a time where you delivered a project late."},{"location":"Dateline/#when-was-the-last-time-you-were-unable-to-deliver-within-the-timeframe-originally-specified","text":"","title":"When was the last time you were unable to deliver within the timeframe originally specified?"},{"location":"Dateline/#what-happens-when-you-realize-you-will-be-unable-to-deliver-by-the-set-deadline","text":"","title":"What happens when you realize you will be unable to deliver by the set deadline?"},{"location":"Dateline/#situation","text":"In this example, I am suppose to migrate a small application from the data center to AWS. This application is mostly used by an internal team.","title":"Situation:"},{"location":"Dateline/#problem","text":"Since I have migrated a couple of products in the past. I figured I would take a shorter time. So, then the Project Manager requested for a dateline. I provided an underestimated timeline. As I started working on the project, I realized that the team that I am working with does not have docker experience. So, they do not know how to contanerize their application. This is awhile ago - and this team were only used to building monolithic applications.","title":"Problem:"},{"location":"Dateline/#solution","text":"I ended up having to learn about their application, teaching them about docker and providing sample docker files. This wasn't enough. I also had to actuallly write their docker files - including create a small testing suite using docker compose. All this ultimately cost a lot of time and effor and I missed the dateline.","title":"Solution:"},{"location":"Dateline/#lesson","text":"From this experience, I have learned not to be optimistic about setting dateline. I admit I was wrong and I should have communicated with the product team, understand their needs and technology shortcomings. Communication was key, and overconfidence can be detrimental. Going forward, I spent a lot more time understanding the product workflow, technology debt of the team I am working with and setting up realistic timelines. I rather be honest than provide a superficial timeline. Without a realistic deadline, the team can feel burnout and deliver subpar work.","title":"Lesson:"},{"location":"Dateline/#impact","text":"So the impact from this experience is that, most of my future project have better dateline and I set better, more organized timeline for myself and my team in general.","title":"Impact:"},{"location":"DifficultDecision/","text":"Describe a Time You Had to Make a Difficult Decision Situation: When I became a lead, I had a team of 5 engineers including myself. We were almost always busy. One of my teammates was not performing up to par. That person was lagging behind and made many mistakes that usually lead to bigger problems. Problem: This became a problem because someone else had to verify this person\u2019s work all the time. It\u2019s as if two people were working on the same problem. This causing others to get frustrated because they had to clean up or refactor code. This was unnecessary work. Solution: I talked to this person several times and made this person keep a notebook with the notes he had learned daily. I designed a project where this person had to work on without anyone\u2019s help. Since this person had worked on this before, this person should know how to solve it. This is similar to a Performance Improvement Plan (PIP). I wanted to give this person enough time to prove themself. Impact: At the end of the day, the person still did not meet my teams standard. My manager and I made the decision to let him go. We were able to hire someone better shortly after. Lesson: The lesson learned here is a difficult but important one. At the end of the day, we are supporting a business, charity can only get you this far. I can put all the effort I want to keep this person, but at the end of the day it\u2019s up to this person to show up. It\u2019s easier to cut our losses sooner and move on, rather than drag on.","title":"Describe a Time You Had to Make a Difficult Decision"},{"location":"DifficultDecision/#describe-a-time-you-had-to-make-a-difficult-decision","text":"","title":"Describe a Time You Had to Make a Difficult Decision"},{"location":"DifficultDecision/#situation","text":"When I became a lead, I had a team of 5 engineers including myself. We were almost always busy. One of my teammates was not performing up to par. That person was lagging behind and made many mistakes that usually lead to bigger problems.","title":"Situation:"},{"location":"DifficultDecision/#problem","text":"This became a problem because someone else had to verify this person\u2019s work all the time. It\u2019s as if two people were working on the same problem. This causing others to get frustrated because they had to clean up or refactor code. This was unnecessary work.","title":"Problem:"},{"location":"DifficultDecision/#solution","text":"I talked to this person several times and made this person keep a notebook with the notes he had learned daily. I designed a project where this person had to work on without anyone\u2019s help. Since this person had worked on this before, this person should know how to solve it. This is similar to a Performance Improvement Plan (PIP). I wanted to give this person enough time to prove themself.","title":"Solution:"},{"location":"DifficultDecision/#impact","text":"At the end of the day, the person still did not meet my teams standard. My manager and I made the decision to let him go. We were able to hire someone better shortly after.","title":"Impact:"},{"location":"DifficultDecision/#lesson","text":"The lesson learned here is a difficult but important one. At the end of the day, we are supporting a business, charity can only get you this far. I can put all the effort I want to keep this person, but at the end of the day it\u2019s up to this person to show up. It\u2019s easier to cut our losses sooner and move on, rather than drag on.","title":"Lesson:"},{"location":"DificultFeedback/","text":"Tell me about delivering difficult feedback to someone on your team. Situation: For this question, I am going to give an example of how a fellow team member was either frequently late or absent from our meetings, and what I did as a team lead to rectify it. Problem: One of my teammember sometimes misses meetings or shows up late to meetings. As a result, most of us end up either waiting for him or having to repeat the minutes of the meeting to him. In the past, when we have a team member that does not show up, the management uses the stick approach. I hated that approach. I wanted an approach based on understanding. Solution: In my team, when a person misses or shows up late, the first thing I usually ask that person is if everything is okay. This shows that I am concerned about the person. Instead of assuming that person did not care, I assume that the person missed or did not show up because something major had happened to them. For example, I first say, \u201cHey I saw that you showed up late. Is everything okay with you?\u201d Usually they say something like, \u201cSorry, I had to drop off the kids\u201d or \u201cSorry, I overslept\u201d. I proceed to tell them that I understand but I need them to see the consequences of their actions from our point of view. For example, I say, \u201cI understand, but I want you to understand that the entire team had to wait 5 minutes until you are there\u201d I usually advise that it\u2019s okay if you are going to be late or miss a meeting. But it\u2019s crucial that you inform the team on slack so that we can carry on without you. Things happen, we understand. Impact: As a result of this approach, most teammates announce clearly when they will be late or will not show up. Most of the time, they show up because constantly posting that you\u2019re going to be late -looks bad. Lesson: One lesson to take away from this is that not every bad action needs a stick approach. Sometimes, we have to come from a place of understanding. Coming from a place of understanding promotes camaraderie and a sense of belonging towards the team. When giving negative feedback: 5 ways to give criticism people actually want to hear Understand the psychology of feedback (and how it\u2019s going to impact the person receiving it) Reframe feedback as \u201cadvice\u201d or \u201cguidance\u201d Forget the sandwich method and focus on candor instead Be informative and focus on areas of improvement Continually work on building a culture of trust When receiving negative feedback: The Dos and Don\u2019ts of how to properly accept criticism Don\u2019t: React right away Don\u2019t: Take it personally Don\u2019t: Try to justify, deflect, or ignore it Don\u2019t: Always wait for others to offer up feedback Do: Take time to gather your thoughts and not get overwhelmed Do: Ask for explicit feedback and clarification Do: Set expectations for what kind of feedback you\u2019re looking for","title":"Tell me about delivering difficult feedback to someone on your team."},{"location":"DificultFeedback/#tell-me-about-delivering-difficult-feedback-to-someone-on-your-team","text":"","title":"Tell me about delivering difficult feedback to someone on your team."},{"location":"DificultFeedback/#situation","text":"For this question, I am going to give an example of how a fellow team member was either frequently late or absent from our meetings, and what I did as a team lead to rectify it.","title":"Situation:"},{"location":"DificultFeedback/#problem","text":"One of my teammember sometimes misses meetings or shows up late to meetings. As a result, most of us end up either waiting for him or having to repeat the minutes of the meeting to him. In the past, when we have a team member that does not show up, the management uses the stick approach. I hated that approach. I wanted an approach based on understanding.","title":"Problem:"},{"location":"DificultFeedback/#solution","text":"In my team, when a person misses or shows up late, the first thing I usually ask that person is if everything is okay. This shows that I am concerned about the person. Instead of assuming that person did not care, I assume that the person missed or did not show up because something major had happened to them. For example, I first say, \u201cHey I saw that you showed up late. Is everything okay with you?\u201d Usually they say something like, \u201cSorry, I had to drop off the kids\u201d or \u201cSorry, I overslept\u201d. I proceed to tell them that I understand but I need them to see the consequences of their actions from our point of view. For example, I say, \u201cI understand, but I want you to understand that the entire team had to wait 5 minutes until you are there\u201d I usually advise that it\u2019s okay if you are going to be late or miss a meeting. But it\u2019s crucial that you inform the team on slack so that we can carry on without you. Things happen, we understand.","title":"Solution:"},{"location":"DificultFeedback/#impact","text":"As a result of this approach, most teammates announce clearly when they will be late or will not show up. Most of the time, they show up because constantly posting that you\u2019re going to be late -looks bad.","title":"Impact:"},{"location":"DificultFeedback/#lesson","text":"One lesson to take away from this is that not every bad action needs a stick approach. Sometimes, we have to come from a place of understanding. Coming from a place of understanding promotes camaraderie and a sense of belonging towards the team.","title":"Lesson:"},{"location":"DificultFeedback/#when-giving-negative-feedback-5-ways-to-give-criticism-people-actually-want-to-hear","text":"Understand the psychology of feedback (and how it\u2019s going to impact the person receiving it) Reframe feedback as \u201cadvice\u201d or \u201cguidance\u201d Forget the sandwich method and focus on candor instead Be informative and focus on areas of improvement Continually work on building a culture of trust","title":"When giving negative feedback: 5 ways to give criticism people actually want to hear"},{"location":"DificultFeedback/#when-receiving-negative-feedback-the-dos-and-donts-of-how-to-properly-accept-criticism","text":"Don\u2019t: React right away Don\u2019t: Take it personally Don\u2019t: Try to justify, deflect, or ignore it Don\u2019t: Always wait for others to offer up feedback Do: Take time to gather your thoughts and not get overwhelmed Do: Ask for explicit feedback and clarification Do: Set expectations for what kind of feedback you\u2019re looking for","title":"When receiving negative feedback: The Dos and Don\u2019ts of how to properly accept criticism"},{"location":"DoneDifferently/","text":"What would you have done differently in a past project? Situation: The example that I am going to provide is technical one. Each time we start working on a new project, we build the infrastructure with terraform. Once the terraform build is successful, we build other higher environments The files and modules in terraform helps us build environment faster and it allows us to use the same template for all environments including production Over time, we add more complexity to the infrastructure and the managing the infrastructure code can become harder Problem: When we add more resources, we sometimes simple copy and paste the existing code while changing the name. Overtime, we have many duplicates of the similar code This is bad practice As the complexity increases, maintaining these code becomes harder Solution One thing I would have done differently is to plan for complexity For example, when I create a shared module, I would ask myself how the file structure would look like if I added 100 more lambdas Lesson: Overtime, I have learned that we have to plan for complexity within our code as well - not just the infrastructure. On a later project, we modularied our terraform code so that resource files so that it can be shared As a lead, I enforce keeping the code dry as much as possible MANAGING Complexiy Impact: When you keep your code in a way that it can scale, it will prevent messy code and unnecessary band aids","title":"What would you have done differently in a past project?"},{"location":"DoneDifferently/#what-would-you-have-done-differently-in-a-past-project","text":"","title":"What would you have done differently in a past project?"},{"location":"DoneDifferently/#situation","text":"The example that I am going to provide is technical one. Each time we start working on a new project, we build the infrastructure with terraform. Once the terraform build is successful, we build other higher environments The files and modules in terraform helps us build environment faster and it allows us to use the same template for all environments including production Over time, we add more complexity to the infrastructure and the managing the infrastructure code can become harder","title":"Situation:"},{"location":"DoneDifferently/#problem","text":"When we add more resources, we sometimes simple copy and paste the existing code while changing the name. Overtime, we have many duplicates of the similar code This is bad practice As the complexity increases, maintaining these code becomes harder","title":"Problem:"},{"location":"DoneDifferently/#solution","text":"One thing I would have done differently is to plan for complexity For example, when I create a shared module, I would ask myself how the file structure would look like if I added 100 more lambdas","title":"Solution"},{"location":"DoneDifferently/#lesson","text":"Overtime, I have learned that we have to plan for complexity within our code as well - not just the infrastructure. On a later project, we modularied our terraform code so that resource files so that it can be shared As a lead, I enforce keeping the code dry as much as possible MANAGING Complexiy","title":"Lesson:"},{"location":"DoneDifferently/#impact","text":"When you keep your code in a way that it can scale, it will prevent messy code and unnecessary band aids","title":"Impact:"},{"location":"FavLanguage/","text":"Piece of trivia about your favorite language The language of my choice is Golang It was developed by Ken Thomson, Rob Pike and Robert Griesemer in 2009 I started learning Go in 2014. Although people say that Golang is very useful for writing light-weight microservices. What I like MOST about go is that you can compile the binaries for multiple OSes and Architectures on the same machine. This is helpful when I am developing open-source tools that can be easily downloaded on any machine. For example: My twitch project My second favorite thing about Go is the ease to write programs that utilizes concurrency For example: My health-check project What I dislike MOST about GO is the lack of built-in libraries. For example, to use a queue or stack, you have to implement if from scratch Another thing I disliked about GO was how they used to manage library dependencies. Overtime they improved this with go mod It\u2019s nice to see the language you like evolve to what you have now. It\u2019s like watching a pet grow.","title":"Piece of trivia about your favorite language"},{"location":"FavLanguage/#piece-of-trivia-about-your-favorite-language","text":"The language of my choice is Golang It was developed by Ken Thomson, Rob Pike and Robert Griesemer in 2009 I started learning Go in 2014. Although people say that Golang is very useful for writing light-weight microservices. What I like MOST about go is that you can compile the binaries for multiple OSes and Architectures on the same machine. This is helpful when I am developing open-source tools that can be easily downloaded on any machine. For example: My twitch project My second favorite thing about Go is the ease to write programs that utilizes concurrency For example: My health-check project What I dislike MOST about GO is the lack of built-in libraries. For example, to use a queue or stack, you have to implement if from scratch Another thing I disliked about GO was how they used to manage library dependencies. Overtime they improved this with go mod It\u2019s nice to see the language you like evolve to what you have now. It\u2019s like watching a pet grow.","title":"Piece of trivia about your favorite language"},{"location":"FiveYears/","text":"Where Do You See Yourself in 5 Years? I am passionate about computers I am passionate about coding I also like the leadership path and mentoring I hope in a few year I can be a lead within my team Contributing to the team to affect large-scale change and improving the technical abilities of my teammates is something I aspire to do over the coming years Software development changes rapidly and over the next five years, I want to contribute in a meaningful way to the sector This business plays a crucial role in shaping industry trends and I hope to be at the forefront of that effort once I\u2019ve built the necessary skills","title":"Where Do You See Yourself in 5 Years?"},{"location":"FiveYears/#where-do-you-see-yourself-in-5-years","text":"I am passionate about computers I am passionate about coding I also like the leadership path and mentoring I hope in a few year I can be a lead within my team Contributing to the team to affect large-scale change and improving the technical abilities of my teammates is something I aspire to do over the coming years Software development changes rapidly and over the next five years, I want to contribute in a meaningful way to the sector This business plays a crucial role in shaping industry trends and I hope to be at the forefront of that effort once I\u2019ve built the necessary skills","title":"Where Do You See Yourself in 5 Years?"},{"location":"Goals/","text":"What goals were you working toward? What can you do? What do you want to do? Improve the way we do things I enjoy developing tools that would help developers and systems engineers with their day-to-day work. Day to day, we encounter gaps within our workflow. Often times, people take manual steps to fill this gaps. Say you want all developers to use a certain version of a software Or, when you deploy code, you need to run several automated test Or, you need a way to centralize logs for all products in your portfolio how would you accomplish this. How do you roll out a systemmatic, consistent pipeline of delivering software? How I develop tools to bridge the gap - I am that missing piece. Automation When you\u2019re not automating the process, you\u2019re creating manual one. These manual steps usually require communication from a person to another. As the path of communication gets wider, the original set of instructions or documentation are misinterpreted, miscommunicated, and not maintained. Computers, on the other hand, are way better at running repetitious tasks accurately. We should write scripts to automate any manual process in our release process. Commit the automation script in source control for other developers to collaborate and improve the process. Documentation My old manager who had since retired used to say: What if you get hit by a bus the next day? I am a big fan of doumentation and keeping up with documentation. In my opinion, code is only complete with good documentation Anyone should, in any region of the world should be able to read your documents and understand what's happening this includes diagrams, images or even videos Leadership At Pearson, I am not only developing code but also leading a team I hate the culture of one-man-army where one person has the knowledge of the software since he is the only person that wrote it. I think a good software if never final. It's always evolving. And is should. But it must be a collborative effort. Where ideas are opposed and agreed upon. I also don't encourage tribal knowledge. This is when a particular skill set is only shared among a group of people. As a leader, I hate passing of a information. This is where I encourage documentations and healthy debates. As a leader, I also want to enable others to innovate (not just for myself). I want to create a culture of experimentation where people can try and fail. I do this a lot with my team. As a lead, I proposed that each member should work an project apart from day-to-day projects (Jira stories), as a result, we found a way to cut our operating cost by 70% Deploying through the pipeline involves three main phases: Building the infrastructure \u2014 provisioning and managing the environment in which your software will run Installing the software and its dependencies \u2014 installing the correct version of the software into the infrastructure Setting up configuration for software \u2014 configuring your software and database, including any data or state it require Experiment Treat everything as an experiment. There are no failures only failed hypothesis. We keep trying and experimenting until we get the desired outcome.","title":"What goals were you working toward?"},{"location":"Goals/#what-goals-were-you-working-toward","text":"","title":"What goals were you working toward?"},{"location":"Goals/#what-can-you-do","text":"","title":"What can you do?"},{"location":"Goals/#what-do-you-want-to-do","text":"","title":"What do you want to do?"},{"location":"Goals/#improve-the-way-we-do-things","text":"I enjoy developing tools that would help developers and systems engineers with their day-to-day work. Day to day, we encounter gaps within our workflow. Often times, people take manual steps to fill this gaps. Say you want all developers to use a certain version of a software Or, when you deploy code, you need to run several automated test Or, you need a way to centralize logs for all products in your portfolio how would you accomplish this. How do you roll out a systemmatic, consistent pipeline of delivering software? How I develop tools to bridge the gap - I am that missing piece.","title":"Improve the way we do things"},{"location":"Goals/#automation","text":"When you\u2019re not automating the process, you\u2019re creating manual one. These manual steps usually require communication from a person to another. As the path of communication gets wider, the original set of instructions or documentation are misinterpreted, miscommunicated, and not maintained. Computers, on the other hand, are way better at running repetitious tasks accurately. We should write scripts to automate any manual process in our release process. Commit the automation script in source control for other developers to collaborate and improve the process.","title":"Automation"},{"location":"Goals/#documentation","text":"My old manager who had since retired used to say: What if you get hit by a bus the next day? I am a big fan of doumentation and keeping up with documentation. In my opinion, code is only complete with good documentation Anyone should, in any region of the world should be able to read your documents and understand what's happening this includes diagrams, images or even videos","title":"Documentation"},{"location":"Goals/#leadership","text":"At Pearson, I am not only developing code but also leading a team I hate the culture of one-man-army where one person has the knowledge of the software since he is the only person that wrote it. I think a good software if never final. It's always evolving. And is should. But it must be a collborative effort. Where ideas are opposed and agreed upon. I also don't encourage tribal knowledge. This is when a particular skill set is only shared among a group of people. As a leader, I hate passing of a information. This is where I encourage documentations and healthy debates. As a leader, I also want to enable others to innovate (not just for myself). I want to create a culture of experimentation where people can try and fail. I do this a lot with my team. As a lead, I proposed that each member should work an project apart from day-to-day projects (Jira stories), as a result, we found a way to cut our operating cost by 70%","title":"Leadership"},{"location":"Goals/#deploying-through-the-pipeline-involves-three-main-phases","text":"Building the infrastructure \u2014 provisioning and managing the environment in which your software will run Installing the software and its dependencies \u2014 installing the correct version of the software into the infrastructure Setting up configuration for software \u2014 configuring your software and database, including any data or state it require","title":"Deploying through the pipeline involves three main phases:"},{"location":"Goals/#experiment","text":"Treat everything as an experiment. There are no failures only failed hypothesis. We keep trying and experimenting until we get the desired outcome.","title":"Experiment"},{"location":"Learning/","text":"Learning a large code base Read the Documentation reading over any available documentation or README file. This allows me to become familiar with the setup, functions, style, and other important parts of the codebase. Pairing pair with a developer on your team who is more familiar with the codebase. This person can provide high-level insight about particular design patterns, testing, processes, and third-party code that are relevant to the project. They can also give you more historical context about the project and why certain choices were originally made Start with the Smallest Part I look at a line of code in the file that I already understand. From there, I keep moving to figure out the related lines of code that I don\u2019t know so that, eventually, I can make sense of the entire piece. Volunter to make small changes - get comfortable with Merge Requests Debugging Session When a fellow developer is debugging a problem, join in the session to see what they are troubleshooting Take a course online If I am unfamilar with the language, I will sign up for a class Read the book or watch youtube tutorials","title":"Learning a large code base"},{"location":"Learning/#learning-a-large-code-base","text":"","title":"Learning a large code base"},{"location":"Learning/#read-the-documentation","text":"reading over any available documentation or README file. This allows me to become familiar with the setup, functions, style, and other important parts of the codebase.","title":"Read the Documentation"},{"location":"Learning/#pairing","text":"pair with a developer on your team who is more familiar with the codebase. This person can provide high-level insight about particular design patterns, testing, processes, and third-party code that are relevant to the project. They can also give you more historical context about the project and why certain choices were originally made","title":"Pairing"},{"location":"Learning/#start-with-the-smallest-part","text":"I look at a line of code in the file that I already understand. From there, I keep moving to figure out the related lines of code that I don\u2019t know so that, eventually, I can make sense of the entire piece. Volunter to make small changes - get comfortable with Merge Requests","title":"Start with the Smallest Part"},{"location":"Learning/#debugging-session","text":"When a fellow developer is debugging a problem, join in the session to see what they are troubleshooting","title":"Debugging Session"},{"location":"Learning/#take-a-course-online","text":"If I am unfamilar with the language, I will sign up for a class Read the book or watch youtube tutorials","title":"Take a course online"},{"location":"MatterToUser/","text":"Tell me about the project you are currently working on. Why does it matter to the user? Situation: My most successful recent project was a project where I shutdown services in the non-production environment during evenings and weekends. This saved us 65% of our monthly cost. Problem: As a team lead, I realized that my team wanted to work on things beyond the scope of infrastructure and deployments. They wanted to write scripts to improve something in our infrastructure. Knowing this, as a lead, I declared that everyone could work on a private project or learn a new technology that could benefit the company. We all decided that we wanted to do this every Thursday. One problem that I wanted to solve was to lower the cost of our monthly bill. Solution: As a solution, my teammate and I worked on an automated cron job of jenkins that would shut down all services including RDS at 7pm and bring them up again at 7am. It also shuts down the services on the weekends. Impact: The impact of this project was apparent within a day. The end users, in the case, the product team that was paying the bill, saved 65% on their monthly bill Lesson: What I\u2019ve learned, especially as a leader, is that you have to be actively listening to the needs of the team. In my case, my team wanted a day to be creative When I enabled them to be creative and work on solutions to improve something within our organization, the end user, in this case the product team responsible for paying the bills benefited from our project.","title":"Tell me about the project you are currently working on. Why does it matter to the user?"},{"location":"MatterToUser/#tell-me-about-the-project-you-are-currently-working-on-why-does-it-matter-to-the-user","text":"","title":"Tell me about the project you are currently working on. Why does it matter to the user?"},{"location":"MatterToUser/#situation","text":"My most successful recent project was a project where I shutdown services in the non-production environment during evenings and weekends. This saved us 65% of our monthly cost.","title":"Situation:"},{"location":"MatterToUser/#problem","text":"As a team lead, I realized that my team wanted to work on things beyond the scope of infrastructure and deployments. They wanted to write scripts to improve something in our infrastructure. Knowing this, as a lead, I declared that everyone could work on a private project or learn a new technology that could benefit the company. We all decided that we wanted to do this every Thursday. One problem that I wanted to solve was to lower the cost of our monthly bill.","title":"Problem:"},{"location":"MatterToUser/#solution","text":"As a solution, my teammate and I worked on an automated cron job of jenkins that would shut down all services including RDS at 7pm and bring them up again at 7am. It also shuts down the services on the weekends.","title":"Solution:"},{"location":"MatterToUser/#impact","text":"The impact of this project was apparent within a day. The end users, in the case, the product team that was paying the bill, saved 65% on their monthly bill","title":"Impact:"},{"location":"MatterToUser/#lesson","text":"What I\u2019ve learned, especially as a leader, is that you have to be actively listening to the needs of the team. In my case, my team wanted a day to be creative When I enabled them to be creative and work on solutions to improve something within our organization, the end user, in this case the product team responsible for paying the bills benefited from our project.","title":"Lesson:"},{"location":"MentorJunior/","text":"How do you mentor junior employees? Situation: My passion has always been teaching. I enjoy teaching. In fact, I\u2019ve considered being a professor when I retire Before I became a team lead, I had to show my managers that I am capable of teaching, training and mentoring junior to senior level employees that joined my team. Problem: My team supports 3 major products and we are busy all the time. It\u2019s not possible to simply handover work to new members. And, it\u2019s not easy to dedicate time to simply go over everything Solution: The best way to solve this problem was to include the new member when any of us are debugging something. Say you are trying to figure out why the health check is failing. As you debug, I told my team to include the new team member on a call. Other times, we let the new team member watch us make a change in one of the lower environments and ask the new member to perform the change in other lower environments. I think the best way to learn is by doing - especially in the lower environments. Impact: If done right, you can see the impact within 3 weeks. The goal is to have the new team member add value as fast as possible. Lesson: One lesson to take away is that, you should have a lot of patience while training new members. A crucial part of mentoring is breaking things down into its simplest form. You have to always think from the person\u2019s point of view and assume they don\u2019t know.","title":"How do you mentor junior employees?"},{"location":"MentorJunior/#how-do-you-mentor-junior-employees","text":"","title":"How do you mentor junior employees?"},{"location":"MentorJunior/#situation","text":"My passion has always been teaching. I enjoy teaching. In fact, I\u2019ve considered being a professor when I retire Before I became a team lead, I had to show my managers that I am capable of teaching, training and mentoring junior to senior level employees that joined my team.","title":"Situation:"},{"location":"MentorJunior/#problem","text":"My team supports 3 major products and we are busy all the time. It\u2019s not possible to simply handover work to new members. And, it\u2019s not easy to dedicate time to simply go over everything","title":"Problem:"},{"location":"MentorJunior/#solution","text":"The best way to solve this problem was to include the new member when any of us are debugging something. Say you are trying to figure out why the health check is failing. As you debug, I told my team to include the new team member on a call. Other times, we let the new team member watch us make a change in one of the lower environments and ask the new member to perform the change in other lower environments. I think the best way to learn is by doing - especially in the lower environments.","title":"Solution:"},{"location":"MentorJunior/#impact","text":"If done right, you can see the impact within 3 weeks. The goal is to have the new team member add value as fast as possible.","title":"Impact:"},{"location":"MentorJunior/#lesson","text":"One lesson to take away is that, you should have a lot of patience while training new members. A crucial part of mentoring is breaking things down into its simplest form. You have to always think from the person\u2019s point of view and assume they don\u2019t know.","title":"Lesson:"},{"location":"NextRole/","text":"What are the traits that you are looking for in your new Team? Teammembers that are display curiousity Team that exhibits a culture of experimentation Team that is willing to try and fail Teammembers that are enthusiastic about showing up to work and solving hard problems What the traits you liked in a functioning or previous team? Camaraderie amongst members the willingnest to help each other stepping up to take on work What are you looking for in your next role? See : Goals","title":"What are the traits that you are looking for in your new Team?"},{"location":"NextRole/#what-are-the-traits-that-you-are-looking-for-in-your-new-team","text":"Teammembers that are display curiousity Team that exhibits a culture of experimentation Team that is willing to try and fail Teammembers that are enthusiastic about showing up to work and solving hard problems","title":"What are the traits that you are looking for in your new Team?"},{"location":"NextRole/#what-the-traits-you-liked-in-a-functioning-or-previous-team","text":"Camaraderie amongst members the willingnest to help each other stepping up to take on work","title":"What the traits you liked in a functioning or previous team?"},{"location":"NextRole/#what-are-you-looking-for-in-your-next-role","text":"See : Goals","title":"What are you looking for in your next role?"},{"location":"OnBoarding/","text":"How do you onboard new employees?How do you mentor new employees? Situation: My passion has always been teaching. I enjoy teaching. In fact, I\u2019ve considered being a professor when I retire. At my current company, we didn\u2019t have a methodical way to onboard new employees. As a result, it took a long time for the new employees to start adding value to the company. Problem: The problem was that no technical person wanted to spend time onboarding a new employee. The most onboarding happens at the HR level. The technical people were not good at training. Training requires skills and patients Solution: I realized that this is a problem. So, I took the initiative to create a comprehensive onboarding program. When a new employee joins, he/she would be required to complete this 5 week program. I design the program in a way that will prepare the new employee to transition to real work easier. In my program, the new employee starts at the basic level - such as uploading a static site from a repo to S3. The head fake of this first project is that the employee would need to contact other people to get access to repos and accounts. It\u2019s a head fake because uploading a static website is a non-trivial task but getting the right access to required repos can be daunting. The next project is building a monolith application, followed by microservices. Each week, an experienced member of my team will also present to the new employee the tech stack that we use. For example, my presentation was CI/CD and jenkins. Someone else presented about infrastructure as code and terraform. Impact: As a result of this initiative, new members can add value sooner to our projects and transition to real work easily. Lesson: From this initiative, I have learnt that it is better to invest the time creating a comprehensive onboarding project rather than simply asking the new employee to shadow senior employees in the long run. It\u2019s methodical and we can work on a baseline to improve the program. show-website","title":"How do you onboard new employees?How do you mentor new employees?"},{"location":"OnBoarding/#how-do-you-onboard-new-employeeshow-do-you-mentor-new-employees","text":"","title":"How do you onboard new employees?How do you mentor new employees?"},{"location":"OnBoarding/#situation","text":"My passion has always been teaching. I enjoy teaching. In fact, I\u2019ve considered being a professor when I retire. At my current company, we didn\u2019t have a methodical way to onboard new employees. As a result, it took a long time for the new employees to start adding value to the company.","title":"Situation:"},{"location":"OnBoarding/#problem","text":"The problem was that no technical person wanted to spend time onboarding a new employee. The most onboarding happens at the HR level. The technical people were not good at training. Training requires skills and patients","title":"Problem:"},{"location":"OnBoarding/#solution","text":"I realized that this is a problem. So, I took the initiative to create a comprehensive onboarding program. When a new employee joins, he/she would be required to complete this 5 week program. I design the program in a way that will prepare the new employee to transition to real work easier. In my program, the new employee starts at the basic level - such as uploading a static site from a repo to S3. The head fake of this first project is that the employee would need to contact other people to get access to repos and accounts. It\u2019s a head fake because uploading a static website is a non-trivial task but getting the right access to required repos can be daunting. The next project is building a monolith application, followed by microservices. Each week, an experienced member of my team will also present to the new employee the tech stack that we use. For example, my presentation was CI/CD and jenkins. Someone else presented about infrastructure as code and terraform.","title":"Solution:"},{"location":"OnBoarding/#impact","text":"As a result of this initiative, new members can add value sooner to our projects and transition to real work easily.","title":"Impact:"},{"location":"OnBoarding/#lesson","text":"From this initiative, I have learnt that it is better to invest the time creating a comprehensive onboarding project rather than simply asking the new employee to shadow senior employees in the long run. It\u2019s methodical and we can work on a baseline to improve the program. show-website","title":"Lesson:"},{"location":"Pixar/","text":"Pixar When I think of Pixar, I think of creativity and curiousity. When people think pf Pixar they sometimes think of one person with all the talent. I've learn that creativity involves a large number of people from different disciplines working effectively together to solve a great many problem - especially if you're making movies At Pixar, I know that I will have to maintain and develop at the same time. And I need to find time in-between to innovate. I would love to work in a place where I can meet passionate people from different departments and interact with them - a place where creative exchange of ideas happen. Not where people do the bare minimum. Coming from a Site Reliability Engineering background, I bring diversity to the team. I bring experience in not only writing code but also building, testing and deploying large scale software This includes my knowledge in linux internals and networking In my previous interviews, I have showed examples of how I have implemented standards and best practices in releasing software I do this at my current role at Pearson, and with my open source projects I\u2019ve always enjoyed solving hard problems and at Pixar they solve hard problems. That's the itch I'm trying to scratch. At Pixar, I get the opportunity to solve hard problems. When I met Ryan (the hiring manager), he shared a story of how Bell labs, a telephone company, created the first transistor and indirectly contributed to the advancement of semiconductors. It's hard to imagine a telephone company in 1947 playing a significant role in the development of computers that we see today. I believe Pixar, a film company, will also play a significant role in the advancement of computers in the future. It would be incredible to be part of this future.","title":"Pixar"},{"location":"Pixar/#pixar","text":"When I think of Pixar, I think of creativity and curiousity. When people think pf Pixar they sometimes think of one person with all the talent. I've learn that creativity involves a large number of people from different disciplines working effectively together to solve a great many problem - especially if you're making movies At Pixar, I know that I will have to maintain and develop at the same time. And I need to find time in-between to innovate. I would love to work in a place where I can meet passionate people from different departments and interact with them - a place where creative exchange of ideas happen. Not where people do the bare minimum. Coming from a Site Reliability Engineering background, I bring diversity to the team. I bring experience in not only writing code but also building, testing and deploying large scale software This includes my knowledge in linux internals and networking In my previous interviews, I have showed examples of how I have implemented standards and best practices in releasing software I do this at my current role at Pearson, and with my open source projects I\u2019ve always enjoyed solving hard problems and at Pixar they solve hard problems. That's the itch I'm trying to scratch. At Pixar, I get the opportunity to solve hard problems. When I met Ryan (the hiring manager), he shared a story of how Bell labs, a telephone company, created the first transistor and indirectly contributed to the advancement of semiconductors. It's hard to imagine a telephone company in 1947 playing a significant role in the development of computers that we see today. I believe Pixar, a film company, will also play a significant role in the advancement of computers in the future. It would be incredible to be part of this future.","title":"Pixar"},{"location":"Preparedness/","text":"Tell me the last time you prepared for something; because you prepared, it was succesful Situation: In the past, before I was team lead, everytime there is a on-call issue/alert, the engineer will have to find a solution from scratch they would need to find a solution on the spot this slowed down the response time Task: My goal was to make on-call process seamless I wanted to have a lower resolve time Action: Much like a POH (pilot operating handbook), where pilot use when there are incidents on the plane, I decided to create my team's on-call handbook. I called it the SRE7 Operating HandBook Here I documented most procedures to take when there's a fire New a new incident happens, the on-call person usually updates the handbook Also, during our post-mortem, I make sure that the book is updated Result: As a result, people were not inimidated to be on-call I also managed to lower our response time as a team Lesson: We have to constantly find ways to improve our existing system","title":"Tell me the last time you prepared for something; because you prepared, it was succesful"},{"location":"Preparedness/#tell-me-the-last-time-you-prepared-for-something-because-you-prepared-it-was-succesful","text":"","title":"Tell me the last time you prepared for something; because you prepared, it was succesful"},{"location":"Preparedness/#situation","text":"In the past, before I was team lead, everytime there is a on-call issue/alert, the engineer will have to find a solution from scratch they would need to find a solution on the spot this slowed down the response time","title":"Situation:"},{"location":"Preparedness/#task","text":"My goal was to make on-call process seamless I wanted to have a lower resolve time","title":"Task:"},{"location":"Preparedness/#action","text":"Much like a POH (pilot operating handbook), where pilot use when there are incidents on the plane, I decided to create my team's on-call handbook. I called it the SRE7 Operating HandBook Here I documented most procedures to take when there's a fire New a new incident happens, the on-call person usually updates the handbook Also, during our post-mortem, I make sure that the book is updated","title":"Action:"},{"location":"Preparedness/#result","text":"As a result, people were not inimidated to be on-call I also managed to lower our response time as a team","title":"Result:"},{"location":"Preparedness/#lesson","text":"We have to constantly find ways to improve our existing system","title":"Lesson:"},{"location":"ProjectPlanning/","text":"Project Planning How do I take an idea to a solution? Lets take an example from one of many implementions Problem The development team deploys code every two weeks Each time they deploy there are several key steps that they have to take for example take manual shot of the current database disable replication of db check nothing is in job queue no incomming request the development team runs these checks manually people have to communicate with each other to accomplish these task it can become very messy It's prone to human error Solution automate all the steps create multiple multiple parallel job with dependencies instead of a linear pipeline How do I methodically approach this? I do not want a one man army doing all these task Avoid tribal knowledge I need to methodically break the pipeline into smaller task I need to delegate work to myself and my peers The approach I have used is the Agile methodology (on Sprint Planning) - I work with the Project manager, we define the scope of the project - I create Isolate tasks within the project - My team and I design time-based objectives - we decide how long each task take - we assign points - I work with my team to delegate the task - Move task into our sprint board - set a goal for the sprint - Start the sprint - Make adjustments to ensure success (daily standup) - I talk about my progress - Blocks - What else I have to do (deploy) - deploy changes - push new features (Iterate) - Go back to the drawing board when outcome fails to meet expections - Work on the problem again after recieving feedback from end user Key takeaway Treat everything as an experiment We test hypothesis I focus on people, prototypes, collaboration, and iteration People - Am I stuck with my work, do I need help. How about my coworkers Output - Do we have a minimum viable product, a prototype for feedback Cross-funtional collaboration - What is the feedback from the end users? Back to the drawing board - lets get it working, lets iterate Personal Capacity Personal productivity set meetings for collaboration Prioritize tasks Quarterly milestone Product road map goals 1,2 ,3 ... SAY I took initiate to do this sort of project meeting. I got promoted to a team lead because I was able to write code and navigate my team as well","title":"Project Planning"},{"location":"ProjectPlanning/#project-planning","text":"","title":"Project Planning"},{"location":"ProjectPlanning/#how-do-i-take-an-idea-to-a-solution","text":"","title":"How do I take an idea to a solution?"},{"location":"ProjectPlanning/#lets-take-an-example-from-one-of-many-implementions","text":"","title":"Lets take an example from one of many implementions"},{"location":"ProjectPlanning/#problem","text":"The development team deploys code every two weeks Each time they deploy there are several key steps that they have to take for example take manual shot of the current database disable replication of db check nothing is in job queue no incomming request the development team runs these checks manually people have to communicate with each other to accomplish these task it can become very messy It's prone to human error","title":"Problem"},{"location":"ProjectPlanning/#solution","text":"automate all the steps create multiple multiple parallel job with dependencies instead of a linear pipeline","title":"Solution"},{"location":"ProjectPlanning/#how-do-i-methodically-approach-this","text":"I do not want a one man army doing all these task Avoid tribal knowledge I need to methodically break the pipeline into smaller task I need to delegate work to myself and my peers The approach I have used is the Agile methodology (on Sprint Planning) - I work with the Project manager, we define the scope of the project - I create Isolate tasks within the project - My team and I design time-based objectives - we decide how long each task take - we assign points - I work with my team to delegate the task - Move task into our sprint board - set a goal for the sprint - Start the sprint - Make adjustments to ensure success (daily standup) - I talk about my progress - Blocks - What else I have to do (deploy) - deploy changes - push new features (Iterate) - Go back to the drawing board when outcome fails to meet expections - Work on the problem again after recieving feedback from end user","title":"How do I methodically approach this?"},{"location":"ProjectPlanning/#key-takeaway","text":"Treat everything as an experiment We test hypothesis I focus on people, prototypes, collaboration, and iteration People - Am I stuck with my work, do I need help. How about my coworkers Output - Do we have a minimum viable product, a prototype for feedback Cross-funtional collaboration - What is the feedback from the end users? Back to the drawing board - lets get it working, lets iterate","title":"Key takeaway"},{"location":"ProjectPlanning/#personal-capacity","text":"Personal productivity set meetings for collaboration Prioritize tasks","title":"Personal Capacity"},{"location":"ProjectPlanning/#quarterly-milestone","text":"Product road map goals 1,2 ,3 ... SAY I took initiate to do this sort of project meeting. I got promoted to a team lead because I was able to write code and navigate my team as well","title":"Quarterly milestone"},{"location":"ProudOf/","text":"Interesting Problem One thing you\u2019ve created that you are particularly proud of Example of an interesting technical problem I have solved Situation: The development team moved their monolithic application into microservices. The development team decoupled their services into sub services but the solution was not optimal. Problem: The application was making too many calls to the database. They used the database pretty much as a placeholder. The application sometimes used up all the concurrent connections allowed. This caused a bottleneck. Their retry logic was embedded in the source code. When an upload fails, the retry loop and timeout is within the same code. With the loops and timeout, I felt like this was an inefficient solution. The services ends up busy being a lot. Solution: My solution was to use message queues. Using a publisher and subscriber model, we don\u2019t have to use the database as a placeholder. I also suggested the implementation of step functions to do the retry logic. Example: A teacher or trainee uploads their documents -videos and lesson plan The upload service drops the files into a bucket. (updates the db) A cron service, on an interval, invokes the generate service to query the database, look for new files on the table and get the files from the bucket and send it to the 3rd party app (updates the db) Another cron job, periodically ask the 3rd party app if it has finished processing the documents. If it has finished, it get the file or information from the 3rd party app and forwards it to the normalizing service. The normalizing service updates the database. The evaluator can now look at the normalized documents. My adapted proposal: When the documents are added to the bucket a serverless function picks it up and puts it in a queue. The Transfer Service will pick from the queue and forward it to the 3rd party application. If the transfer fails, the step function will retry. Callback Now the 3rd party app will callback our service once it has finished proofreading our documents and processing the user\u2019s video. Instead of us ping the 3rd party application. It has several more step functions and serverless function logic to make sure the returned files are correct. And then it will be queued for normalization. Impact: The impact of this was apparent. The workflow seems much more intuitive. Especially with the retry logic and not having to use the database as a placeholder. Lesson: One lesson I have learned is that we should constantly find ways to improve our workflow with emerging technologies. The reason why this workflow was not adopted earlier was because the technology just wasn\u2019t there. We should look beyond just using containers. We should always leverage better technology that would improve our workflow.","title":"Interesting Problem"},{"location":"ProudOf/#interesting-problem","text":"","title":"Interesting Problem"},{"location":"ProudOf/#one-thing-youve-created-that-you-are-particularly-proud-of","text":"","title":"One thing you\u2019ve created that you are particularly proud of"},{"location":"ProudOf/#example-of-an-interesting-technical-problem-i-have-solved","text":"","title":"Example of an interesting technical problem I have solved"},{"location":"ProudOf/#situation","text":"The development team moved their monolithic application into microservices. The development team decoupled their services into sub services but the solution was not optimal.","title":"Situation:"},{"location":"ProudOf/#problem","text":"The application was making too many calls to the database. They used the database pretty much as a placeholder. The application sometimes used up all the concurrent connections allowed. This caused a bottleneck. Their retry logic was embedded in the source code. When an upload fails, the retry loop and timeout is within the same code. With the loops and timeout, I felt like this was an inefficient solution. The services ends up busy being a lot.","title":"Problem:"},{"location":"ProudOf/#solution","text":"My solution was to use message queues. Using a publisher and subscriber model, we don\u2019t have to use the database as a placeholder. I also suggested the implementation of step functions to do the retry logic.","title":"Solution:"},{"location":"ProudOf/#example","text":"A teacher or trainee uploads their documents -videos and lesson plan The upload service drops the files into a bucket. (updates the db) A cron service, on an interval, invokes the generate service to query the database, look for new files on the table and get the files from the bucket and send it to the 3rd party app (updates the db) Another cron job, periodically ask the 3rd party app if it has finished processing the documents. If it has finished, it get the file or information from the 3rd party app and forwards it to the normalizing service. The normalizing service updates the database. The evaluator can now look at the normalized documents.","title":"Example:"},{"location":"ProudOf/#my-adapted-proposal","text":"When the documents are added to the bucket a serverless function picks it up and puts it in a queue. The Transfer Service will pick from the queue and forward it to the 3rd party application. If the transfer fails, the step function will retry.","title":"My adapted proposal:"},{"location":"ProudOf/#callback","text":"Now the 3rd party app will callback our service once it has finished proofreading our documents and processing the user\u2019s video. Instead of us ping the 3rd party application. It has several more step functions and serverless function logic to make sure the returned files are correct. And then it will be queued for normalization.","title":"Callback"},{"location":"ProudOf/#impact","text":"The impact of this was apparent. The workflow seems much more intuitive. Especially with the retry logic and not having to use the database as a placeholder.","title":"Impact:"},{"location":"ProudOf/#lesson","text":"One lesson I have learned is that we should constantly find ways to improve our workflow with emerging technologies. The reason why this workflow was not adopted earlier was because the technology just wasn\u2019t there. We should look beyond just using containers. We should always leverage better technology that would improve our workflow.","title":"Lesson:"},{"location":"Questions/","text":"Question about the company's business If I were to take on this role, what do you see as the roadmap in the first 30, 60, and 90 days on the job? What are some key results you'd like to see? What's one thing about working at this company that surprised you after you joined? What are some common characteristics shared by people who have exceeded expections in this role in the past? Can you share an example of something the team did that didn\u2019t go well, and what did you do to course correct? What does the shipping look like internally, and, How much attention do you pay to reducing friction for the engineering team? How will I fail? How do you incentivise your team? What is the state of technology at <>? Is the company drowning in complexity and tech debt or are they doing most things right How are decisions made? To what extent would I be able to influence decisions? What is the culture like? Will I be able to strive there? Will working in this culture be fun or will it result in negative stress? How is authority established and are people empowered to challenge authority to move everyone forward?","title":"Question about the company's business"},{"location":"Questions/#question-about-the-companys-business","text":"If I were to take on this role, what do you see as the roadmap in the first 30, 60, and 90 days on the job? What are some key results you'd like to see? What's one thing about working at this company that surprised you after you joined? What are some common characteristics shared by people who have exceeded expections in this role in the past? Can you share an example of something the team did that didn\u2019t go well, and what did you do to course correct? What does the shipping look like internally, and, How much attention do you pay to reducing friction for the engineering team? How will I fail? How do you incentivise your team? What is the state of technology at <>? Is the company drowning in complexity and tech debt or are they doing most things right How are decisions made? To what extent would I be able to influence decisions? What is the culture like? Will I be able to strive there? Will working in this culture be fun or will it result in negative stress? How is authority established and are people empowered to challenge authority to move everyone forward?","title":"Question about the company's business"},{"location":"Smalltalk/","text":"Small Talk Find common ground creeep them on LinkedIn (see what they enjoy) why they join the company Let the interview take the lead let the interviewer set the tone don't get more personal than your interviewer ride on the same wavelength as the interviewer don't exceed the interviewer's level of comfort Good vibes only only focus on positive focus on topics that brings up good feeling extended first impression wnat to have interviewer have positive feeling towards you LISTEN don't interrupt more than learing you going to have to think carefully about the type of things they are bring up and what it means pick up on hints and use them to further converstations Small talk starter kit How has your week been so far? How was your weekend? I recently read some interesting news about [company] I really lie the decor/design of your office you have How has your morning/afternoon been so far?","title":"Small Talk"},{"location":"Smalltalk/#small-talk","text":"","title":"Small Talk"},{"location":"Smalltalk/#find-common-ground","text":"creeep them on LinkedIn (see what they enjoy) why they join the company","title":"Find common ground"},{"location":"Smalltalk/#let-the-interview-take-the-lead","text":"let the interviewer set the tone don't get more personal than your interviewer ride on the same wavelength as the interviewer don't exceed the interviewer's level of comfort","title":"Let the interview take the lead"},{"location":"Smalltalk/#good-vibes-only","text":"only focus on positive focus on topics that brings up good feeling extended first impression wnat to have interviewer have positive feeling towards you","title":"Good vibes only"},{"location":"Smalltalk/#listen","text":"don't interrupt more than learing you going to have to think carefully about the type of things they are bring up and what it means pick up on hints and use them to further converstations","title":"LISTEN"},{"location":"Smalltalk/#small-talk-starter-kit","text":"How has your week been so far? How was your weekend? I recently read some interesting news about [company] I really lie the decor/design of your office you have How has your morning/afternoon been so far?","title":"Small talk starter kit"},{"location":"Software/","text":"Software Development Life Cycle What is the typical software development life cycle? Analysis and Planning How does this project connect to my company\u2019s larger mission and goals? Do I have the people, tools, resources I need to take this on? Set timeline for the project Estimate the cost if possible (AWS cost) Requirements Who\u2019s going to use it and why? What sort of data input/output is needed? Will I need to integrate with other tools or APIs? How will I handle security/privacy? How will I scale? Design and Prototyping It's not about how it looks and feel but it's about how it works Use lucid chart - whiteboarding Software Development Actually do the work - write the code Testing This is built into the pipeline Unit test - functional test Deployment! Deploy your feature/software Deploy through a pipeline automate everything the keyword is lifecycle, maintain a feedback loop maintain the deployable pipeline - encourage frequent deployment Set up observability pipeline set up alerts - for on-call How I write code I want to become an expert at Managing Complexity As a software developer, I see the world through the lens of software development. We need to manage the complexity of the systems that we create as we create them, and if we want to do this at any kind of scale beyond the scope of a single, small team, we need to manage the complexity of the organizational information systems as well as the more technical software information systems WHen I write code I focus on these 5 aspects Modularity Cohesion Separation of concerns Documentation/abstraction Coupling Modularity/Separation of Concerns is the degree to which a system\u2019s components may be separated and recombined, gives us the benefit of flexibility gives us the ability to test things seperately - test each function a design principle for separating a computer program into distinct sections such that each section addresses a separate concern. gives us clarity and focus in our code and system useful for dependency injection Cohesion the degree to which the elements inside a module belong together you write function that help each other in the same class Abstraction/Documentation Users of your service or API does not need to know how it works Users provide input and my API or function should provide the output Documentation plays a big part in this Talk about your documentation Coupling Coupling is the the degree of interdependence between software modules much like creating microservices that talk to each other -we can scale it indepently","title":"Software Development Life Cycle"},{"location":"Software/#software-development-life-cycle","text":"","title":"Software Development Life Cycle"},{"location":"Software/#what-is-the-typical-software-development-life-cycle","text":"Analysis and Planning How does this project connect to my company\u2019s larger mission and goals? Do I have the people, tools, resources I need to take this on? Set timeline for the project Estimate the cost if possible (AWS cost) Requirements Who\u2019s going to use it and why? What sort of data input/output is needed? Will I need to integrate with other tools or APIs? How will I handle security/privacy? How will I scale? Design and Prototyping It's not about how it looks and feel but it's about how it works Use lucid chart - whiteboarding Software Development Actually do the work - write the code Testing This is built into the pipeline Unit test - functional test Deployment! Deploy your feature/software Deploy through a pipeline automate everything the keyword is lifecycle, maintain a feedback loop maintain the deployable pipeline - encourage frequent deployment Set up observability pipeline set up alerts - for on-call","title":"What is the typical software development life cycle?"},{"location":"Software/#how-i-write-code","text":"I want to become an expert at Managing Complexity As a software developer, I see the world through the lens of software development. We need to manage the complexity of the systems that we create as we create them, and if we want to do this at any kind of scale beyond the scope of a single, small team, we need to manage the complexity of the organizational information systems as well as the more technical software information systems","title":"How I write code"},{"location":"Software/#when-i-write-code-i-focus-on-these-5-aspects","text":"Modularity Cohesion Separation of concerns Documentation/abstraction Coupling","title":"WHen I write code I focus on these 5 aspects"},{"location":"Software/#modularityseparation-of-concerns","text":"is the degree to which a system\u2019s components may be separated and recombined, gives us the benefit of flexibility gives us the ability to test things seperately - test each function a design principle for separating a computer program into distinct sections such that each section addresses a separate concern. gives us clarity and focus in our code and system useful for dependency injection","title":"Modularity/Separation of Concerns"},{"location":"Software/#cohesion","text":"the degree to which the elements inside a module belong together you write function that help each other in the same class","title":"Cohesion"},{"location":"Software/#abstractiondocumentation","text":"Users of your service or API does not need to know how it works Users provide input and my API or function should provide the output Documentation plays a big part in this Talk about your documentation","title":"Abstraction/Documentation"},{"location":"Software/#coupling","text":"Coupling is the the degree of interdependence between software modules much like creating microservices that talk to each other -we can scale it indepently","title":"Coupling"},{"location":"Strengths/","text":"What are your strengths? Situation: My biggest strength is my Logic and reasoning skills. I am able to take a complex idea and present it simply I am able to take an idea and find ways to present it as a solution I\u2019ll paint you an example: When I became a team lead, one of my first tasks was to move our container cluster EC2 to Fargate. That means moving our infrastructure from people managed to AWS managed. We need to migrate because the cost of maintaining the old infrastructure will increase over time. Problem: The problem is that the product team\u2019s manager does not want to change anything because the existing system works. In his point of view, he does not want to spend the time and effort to test the new infrastructure if we build it. When I was communicating the benefits of the migration to the product manager, I only talked about how my team can benefit and how it\u2019s going to make my team\u2019s life easier. I couldn\u2019t sell him on the idea. Solution: I later realized that I should not approach this from the standpoint of how I can benefit but how the development team can benefit. My team created a spreadsheet that shows that in the long run, in terms of labor hours, we can save money if we use AWS managed resources. My team brought up a mock environment and showed the development team the improvements we can see in terms of deployment time and manual security patching. Impact: The impact of this apparent, my team spent less time patching server and managing scaling while the development team benefited from shorter deployment times. SHOW DEMO HERE Lesson: Although I am good at persuasion, I learned that persuasion involves many other soft skills such as: Communication Emotional intelligence, Logic and reasoning, Interpersonal skills and most importantly negotiation.","title":"What are your strengths?"},{"location":"Strengths/#what-are-your-strengths","text":"","title":"What are your strengths?"},{"location":"Strengths/#situation","text":"My biggest strength is my Logic and reasoning skills. I am able to take a complex idea and present it simply I am able to take an idea and find ways to present it as a solution I\u2019ll paint you an example: When I became a team lead, one of my first tasks was to move our container cluster EC2 to Fargate. That means moving our infrastructure from people managed to AWS managed. We need to migrate because the cost of maintaining the old infrastructure will increase over time.","title":"Situation:"},{"location":"Strengths/#problem","text":"The problem is that the product team\u2019s manager does not want to change anything because the existing system works. In his point of view, he does not want to spend the time and effort to test the new infrastructure if we build it. When I was communicating the benefits of the migration to the product manager, I only talked about how my team can benefit and how it\u2019s going to make my team\u2019s life easier. I couldn\u2019t sell him on the idea.","title":"Problem:"},{"location":"Strengths/#solution","text":"I later realized that I should not approach this from the standpoint of how I can benefit but how the development team can benefit. My team created a spreadsheet that shows that in the long run, in terms of labor hours, we can save money if we use AWS managed resources. My team brought up a mock environment and showed the development team the improvements we can see in terms of deployment time and manual security patching.","title":"Solution:"},{"location":"Strengths/#impact","text":"The impact of this apparent, my team spent less time patching server and managing scaling while the development team benefited from shorter deployment times. SHOW DEMO HERE","title":"Impact:"},{"location":"Strengths/#lesson","text":"Although I am good at persuasion, I learned that persuasion involves many other soft skills such as: Communication Emotional intelligence, Logic and reasoning, Interpersonal skills and most importantly negotiation.","title":"Lesson:"},{"location":"TeamWork/","text":"Team Work Have you ever found it difficult to work with a manager or other team members? Situation: A year ago, we had a change of manager I personally don't have a hard time I am quite a social person I have often worked with managers and coworkers, and I rarely find it difficult. Task: Goal is to make my team feel less treaten of the new manager Action: In order to make my team work better with the manager, I used to invite th manager to our smaller meeting (He was mostly an observer) If I organized a social activity, I invited my manager as well Lessons: Sometimes it takes some time to adjust to a new manager or leader in a team environment. However, as long as we take the time to connect and clarify expectations, I think everything will work out. I expect an adjustment period, just like any other relationship. When was the last time you enjoyed working as a team? When was the time you did not enjoy the team? I was not start with a time where I did not enjoy working in a team and what was the factors In my former team (5 years ago), there was a lack of leadership I felt like there was lack of communication between developers and sre People didn't feel motivation There was no end goal People came to work and didn't the bare minimum There was nothing to be excited about (no motivation) NEW TEAM We worked towards a common goal There was clear leadership from the manager The manager checked in with me and I checked in with my team and with individuals on a bi-weekly basis. My manager trusted us, but also cared about our work. I all felt invested in the project because leadership showed their own investment People did more than the bare minimum Felt like we were on a mission Cross-collaboration between developers and devops was phenomenal - it flet like we were working towards a bigger goal","title":"Team Work"},{"location":"TeamWork/#team-work","text":"","title":"Team Work"},{"location":"TeamWork/#have-you-ever-found-it-difficult-to-work-with-a-manager-or-other-team-members","text":"","title":"Have you ever found it difficult to work with a manager or other team members?"},{"location":"TeamWork/#situation","text":"A year ago, we had a change of manager I personally don't have a hard time I am quite a social person I have often worked with managers and coworkers, and I rarely find it difficult.","title":"Situation:"},{"location":"TeamWork/#task","text":"Goal is to make my team feel less treaten of the new manager","title":"Task:"},{"location":"TeamWork/#action","text":"In order to make my team work better with the manager, I used to invite th manager to our smaller meeting (He was mostly an observer) If I organized a social activity, I invited my manager as well","title":"Action:"},{"location":"TeamWork/#lessons","text":"Sometimes it takes some time to adjust to a new manager or leader in a team environment. However, as long as we take the time to connect and clarify expectations, I think everything will work out. I expect an adjustment period, just like any other relationship.","title":"Lessons:"},{"location":"TeamWork/#when-was-the-last-time-you-enjoyed-working-as-a-team-when-was-the-time-you-did-not-enjoy-the-team","text":"I was not start with a time where I did not enjoy working in a team and what was the factors In my former team (5 years ago), there was a lack of leadership I felt like there was lack of communication between developers and sre People didn't feel motivation There was no end goal People came to work and didn't the bare minimum There was nothing to be excited about (no motivation) NEW TEAM We worked towards a common goal There was clear leadership from the manager The manager checked in with me and I checked in with my team and with individuals on a bi-weekly basis. My manager trusted us, but also cared about our work. I all felt invested in the project because leadership showed their own investment People did more than the bare minimum Felt like we were on a mission Cross-collaboration between developers and devops was phenomenal - it flet like we were working towards a bigger goal","title":"When was the last time you enjoyed working as a team? When was the time you did not enjoy the team?"},{"location":"Template/","text":"Non Star Situation: Problem: Solution: Impact: Lesson: STAR Situation: Task: Action: Result: Lesson: Situation: Describe the situation that you were in or the task that you needed to accomplish. You must describe a specific event or situation, not a generalized description of what you have done in the past. Be sure to give enough detail for the interviewer to understand. This situation can be from a previous job, from a volunteer experience, or any relevant event. Task: What goal were you working toward? Action: Describe the actions you took to address the situation with an appropriate amount of detail and keep the focus on YOU. What specific steps did you take and what was your particular contribution? Be careful that you don\u2019t describe what the team or group did when talking about a project, but what you actually did. Use the word \u201cI,\u201d not \u201cwe\u201d when describing actions. Result: Describe the outcome of your actions and don\u2019t be shy about taking credit for your behavior. What happened? How did the event end? What did you accomplish? What did you learn? Make sure your answer contains multiple positive results. Lesson:","title":"Non Star"},{"location":"Template/#non-star","text":"","title":"Non Star"},{"location":"Template/#situation","text":"","title":"Situation:"},{"location":"Template/#problem","text":"","title":"Problem:"},{"location":"Template/#solution","text":"","title":"Solution:"},{"location":"Template/#impact","text":"","title":"Impact:"},{"location":"Template/#lesson","text":"","title":"Lesson:"},{"location":"Template/#star","text":"","title":"STAR"},{"location":"Template/#situation_1","text":"","title":"Situation:"},{"location":"Template/#task","text":"","title":"Task:"},{"location":"Template/#action","text":"","title":"Action:"},{"location":"Template/#result","text":"","title":"Result:"},{"location":"Template/#lesson_1","text":"","title":"Lesson:"},{"location":"Template/#situation_2","text":"Describe the situation that you were in or the task that you needed to accomplish. You must describe a specific event or situation, not a generalized description of what you have done in the past. Be sure to give enough detail for the interviewer to understand. This situation can be from a previous job, from a volunteer experience, or any relevant event.","title":"Situation:"},{"location":"Template/#task_1","text":"What goal were you working toward?","title":"Task:"},{"location":"Template/#action_1","text":"Describe the actions you took to address the situation with an appropriate amount of detail and keep the focus on YOU. What specific steps did you take and what was your particular contribution? Be careful that you don\u2019t describe what the team or group did when talking about a project, but what you actually did. Use the word \u201cI,\u201d not \u201cwe\u201d when describing actions.","title":"Action:"},{"location":"Template/#result_1","text":"Describe the outcome of your actions and don\u2019t be shy about taking credit for your behavior. What happened? How did the event end? What did you accomplish? What did you learn? Make sure your answer contains multiple positive results.","title":"Result:"},{"location":"Template/#lesson_2","text":"","title":"Lesson:"},{"location":"Testing/","text":"Testing Test Driven Deployment For the vast majority of us, unit tests were short bits of throw-away code that we wrote to make sure our programs \u201cworked.\u201d The problem is that tests must change as the production code evolves. The dirtier the tests, the harder they are to change. The more tangled the test code, the more likely it is that you will spend more time cramming new tests into the suite than it takes to write the new production code. As you modify the production code, old tests start to fail, and the mess in the test code makes it hard to get those tests to pass again. So the tests become viewed as an ever-increasing liability. If you don\u2019t keep your tests clean, you will lose them. And without them, you lose the very thing that keeps your production code flexible. It is unit tests that keep our code flexible, maintainable, and reusable. The reason is simple. If you have tests, you do not fear making changes to the code! Unit tests A unit test is the smallest and simplest form of software testing. These tests are employed to assess a separable unit of software, such as a class or function, for correctness independent of the larger software system that contains the unit. Unit tests are also employed as a form of specification to ensure that a function or module exactly performs the behavior required by the system. Integration tests Software components that pass individual unit tests are assembled into larger components. Engineers then run an integration test on an assembled component to verify that it functions correctly. A common example of a dependency injection is to replace a stateful database with a lightweight mock that has precisely specified behavior. I personally have used docker-compose to mock a postgress database and the application itself System tests A system test is the largest scale test that engineers run for an undeployed system. All modules belonging to a specific component, such as a server that passed integration tests, are assembled into the system. Then the engineer tests the end-to-end functionality of the system. Smoke tests Performance tests QA tests Regression test Key Take away - Don\u2019t comment out failing test. Delete it if it\u2019s not relevant or refactor the test. - Keep the build and test process short - Speed is essential because there is an opportunity cost associated with not delivering software. - Delivering fast is also important because it allows you to verify whether our features and bug fixes are really useful. SEE - Builing and deploying","title":"Testing"},{"location":"Testing/#testing","text":"","title":"Testing"},{"location":"Testing/#test-driven-deployment","text":"For the vast majority of us, unit tests were short bits of throw-away code that we wrote to make sure our programs \u201cworked.\u201d The problem is that tests must change as the production code evolves. The dirtier the tests, the harder they are to change. The more tangled the test code, the more likely it is that you will spend more time cramming new tests into the suite than it takes to write the new production code. As you modify the production code, old tests start to fail, and the mess in the test code makes it hard to get those tests to pass again. So the tests become viewed as an ever-increasing liability. If you don\u2019t keep your tests clean, you will lose them. And without them, you lose the very thing that keeps your production code flexible. It is unit tests that keep our code flexible, maintainable, and reusable. The reason is simple. If you have tests, you do not fear making changes to the code!","title":"Test Driven Deployment"},{"location":"Testing/#unit-tests","text":"A unit test is the smallest and simplest form of software testing. These tests are employed to assess a separable unit of software, such as a class or function, for correctness independent of the larger software system that contains the unit. Unit tests are also employed as a form of specification to ensure that a function or module exactly performs the behavior required by the system.","title":"Unit tests"},{"location":"Testing/#integration-tests","text":"Software components that pass individual unit tests are assembled into larger components. Engineers then run an integration test on an assembled component to verify that it functions correctly. A common example of a dependency injection is to replace a stateful database with a lightweight mock that has precisely specified behavior. I personally have used docker-compose to mock a postgress database and the application itself","title":"Integration tests"},{"location":"Testing/#system-tests","text":"A system test is the largest scale test that engineers run for an undeployed system. All modules belonging to a specific component, such as a server that passed integration tests, are assembled into the system. Then the engineer tests the end-to-end functionality of the system. Smoke tests Performance tests QA tests Regression test","title":"System tests"},{"location":"Testing/#key","text":"Take away - Don\u2019t comment out failing test. Delete it if it\u2019s not relevant or refactor the test. - Keep the build and test process short - Speed is essential because there is an opportunity cost associated with not delivering software. - Delivering fast is also important because it allows you to verify whether our features and bug fixes are really useful. SEE - Builing and deploying","title":"Key"},{"location":"Todo/","text":"Tell Me About a Time You Failed. - talk about leadership - free time - 20% (lots of discouragement from manager) - gave up on it - asked my manager that if I can at least try it one more time - he gave the greenlight- tried it out - it worked If You\u2019re Proud Of Something, What Would It Be? Experiment Treat everything as an experiment. There are no failures only failed hypothesis. We keep trying and experimenting until we get the desired outcome.","title":"Todo"},{"location":"Todo/#experiment","text":"Treat everything as an experiment. There are no failures only failed hypothesis. We keep trying and experimenting until we get the desired outcome.","title":"Experiment"},{"location":"Unfair/","text":"Describe a time when you felt you were being treated unfairly at work. What was the situation and how did you respond? Situation: When my team had a new manager, the manager did know anything about the team they were manging. The team was disarray and they was poor planning on the leadership I expected some sort of transition to the new manager Task: My goal was to get back the team on a regular cadance I decided to be a defactor leader Action: I distributed work among the team I also worked with the new project manager to add stories to the Jira board I answered all the questions when the product owner had questions I was the \"senior member that knew what was happening\" Result: I did all of these because I felt that someone had to step up I knew other team leader were recognized for their effort, but I was merely running everything in the backgound as the defactor team lead As a result, my team got back on track Our montly security compliance were on the good We met our deadlines with our product owners Lesson: I did not complain eventhough I was not recognized as the team lead I just worked harder and maintained what I was doing Eventually I got recognized but for a long time, I did it because I felt that it was the right thing to do","title":"Describe a time when you felt you were being treated unfairly at work. What was the situation and how did you respond?"},{"location":"Unfair/#describe-a-time-when-you-felt-you-were-being-treated-unfairly-at-work-what-was-the-situation-and-how-did-you-respond","text":"","title":"Describe a time when you felt you were being treated unfairly at work. What was the situation and how did you respond?"},{"location":"Unfair/#situation","text":"When my team had a new manager, the manager did know anything about the team they were manging. The team was disarray and they was poor planning on the leadership I expected some sort of transition to the new manager","title":"Situation:"},{"location":"Unfair/#task","text":"My goal was to get back the team on a regular cadance I decided to be a defactor leader","title":"Task:"},{"location":"Unfair/#action","text":"I distributed work among the team I also worked with the new project manager to add stories to the Jira board I answered all the questions when the product owner had questions I was the \"senior member that knew what was happening\"","title":"Action:"},{"location":"Unfair/#result","text":"I did all of these because I felt that someone had to step up I knew other team leader were recognized for their effort, but I was merely running everything in the backgound as the defactor team lead As a result, my team got back on track Our montly security compliance were on the good We met our deadlines with our product owners","title":"Result:"},{"location":"Unfair/#lesson","text":"I did not complain eventhough I was not recognized as the team lead I just worked harder and maintained what I was doing Eventually I got recognized but for a long time, I did it because I felt that it was the right thing to do","title":"Lesson:"},{"location":"Versioncontrol/","text":"Version Control Everything should be committed into source control, not just your software code. Version control isn\u2019t all about having backups. That is only a side effect. Version control is about documenting and annotating the process of creation, and it is uniquely necessary for programming because of how eternally iterative programming is. Code that is not annotated with its history and its motivations suffers to an extreme degree of entropy, becoming more and more difficult to understand. Configuration Configuration settings have a lifecycle completely different from that of code, while passwords and other sensitive information should not be checked into version control. Ensure that your configuration information is modular and encapsulated so that changes in one place don\u2019t have knock-on effects for other, unrelated pieces of configuration. Be minimalistic. Keep the configuration information as simple and focused as possible. This includes \u2018requirement\u2019 documents, test scripts, automated test cases, network configuration scripts, deployment scripts, database creation, database maintenance scripts, technical documentation and so on. These scripts should be version-controlled, and the relevant version should be identifiable for any given build \u2014 these change sets should have a single identifier, such as a build number or version control change set number, that references every piece. Ask yourself: Could you completely re-create your live environment (like production), excluding production date, from scratch with the version-controlled assets that you store? Can you regress to an earlier, known good state of your application?","title":"Version Control"},{"location":"Versioncontrol/#version-control","text":"Everything should be committed into source control, not just your software code. Version control isn\u2019t all about having backups. That is only a side effect. Version control is about documenting and annotating the process of creation, and it is uniquely necessary for programming because of how eternally iterative programming is. Code that is not annotated with its history and its motivations suffers to an extreme degree of entropy, becoming more and more difficult to understand.","title":"Version Control"},{"location":"Versioncontrol/#configuration","text":"Configuration settings have a lifecycle completely different from that of code, while passwords and other sensitive information should not be checked into version control. Ensure that your configuration information is modular and encapsulated so that changes in one place don\u2019t have knock-on effects for other, unrelated pieces of configuration. Be minimalistic. Keep the configuration information as simple and focused as possible. This includes \u2018requirement\u2019 documents, test scripts, automated test cases, network configuration scripts, deployment scripts, database creation, database maintenance scripts, technical documentation and so on. These scripts should be version-controlled, and the relevant version should be identifiable for any given build \u2014 these change sets should have a single identifier, such as a build number or version control change set number, that references every piece. Ask yourself: Could you completely re-create your live environment (like production), excluding production date, from scratch with the version-controlled assets that you store? Can you regress to an earlier, known good state of your application?","title":"Configuration"},{"location":"Weakness/","text":"What are your weakness? My greatest weakness is that I sometimes have a hard time letting go of a project. If something does not work, I spent too much time on it. I\u2019m the biggest critic of my work. I can always find something that needs to be improved or changed. To help myself improve in this area, I give myself deadlines for revisions. This helps ensure that I\u2019m not making changes at the last minute. I started to treat everything as an experiment. This was I am not too hard on myself","title":"What are your weakness?"},{"location":"Weakness/#what-are-your-weakness","text":"My greatest weakness is that I sometimes have a hard time letting go of a project. If something does not work, I spent too much time on it. I\u2019m the biggest critic of my work. I can always find something that needs to be improved or changed. To help myself improve in this area, I give myself deadlines for revisions. This helps ensure that I\u2019m not making changes at the last minute. I started to treat everything as an experiment. This was I am not too hard on myself","title":"What are your weakness?"},{"location":"WhatDoIDo/","text":"Day-to-day What do you do at my current position? I design and architect the infrastructure after gathering the requirements from the developers and product owners. I work closely with the development team. I try to understand their end goal and their workflow. With that, I work on a solution that optimizes the infrastructure where we can scale and remain reliable I design the infrastructure so that applications can automatically recover from failure I do all these while keeping the operating cost in mind Next, I build and codify the infrastructure using terraform - Terraform I create the pipelines on Jenkins to deploy the application I set up alerts and monitoring for the application. This will alert my team if the application or AWS resources is down or when resources reach a certain threshold I need to make sure I protect data in transit and at rest. Pretty much keeping people away from data. I also have to prepare for security events. For example the zero-day log4J vulnerability that happened last year I work SLOs and budget for errors with the product manager I also write or create custom tools to automate or improve existing processes using go as my primary language As a team lead, I set long term long term goals and make sure that my team is on the right path","title":"Day-to-day"},{"location":"WhatDoIDo/#day-to-day","text":"","title":"Day-to-day"},{"location":"WhatDoIDo/#what-do-you-do-at-my-current-position","text":"I design and architect the infrastructure after gathering the requirements from the developers and product owners. I work closely with the development team. I try to understand their end goal and their workflow. With that, I work on a solution that optimizes the infrastructure where we can scale and remain reliable I design the infrastructure so that applications can automatically recover from failure I do all these while keeping the operating cost in mind Next, I build and codify the infrastructure using terraform - Terraform I create the pipelines on Jenkins to deploy the application I set up alerts and monitoring for the application. This will alert my team if the application or AWS resources is down or when resources reach a certain threshold I need to make sure I protect data in transit and at rest. Pretty much keeping people away from data. I also have to prepare for security events. For example the zero-day log4J vulnerability that happened last year I work SLOs and budget for errors with the product manager I also write or create custom tools to automate or improve existing processes using go as my primary language As a team lead, I set long term long term goals and make sure that my team is on the right path","title":"What do you do at my current position?"},{"location":"WhyLeave/","text":"Why Leave? What are you planning to leave your current company? I\u2019ve worked for Pearson for 9 years. During my tenure here, I have learned great deal about software development and how to release software. When I first joined the DevOps team, I was involved in moving things out of the data center to AWS. I helped pioneer my company\u2019s first microservice infrastructure. I've seen us evolved from the data center to a cloud based infrastructure However after 9 years, I feel like I\u2019ve learned everything I need to know at my position. I want to expand myself and seek bigger challenges I am hoping that my next position will have more impact towards a larger audience. Especially with the products that I am building I am also seeking opportunities for leadership, which is critical in my career goals And, that's why I am leaving","title":"Why Leave?"},{"location":"WhyLeave/#why-leave","text":"","title":"Why Leave?"},{"location":"WhyLeave/#what-are-you-planning-to-leave-your-current-company","text":"I\u2019ve worked for Pearson for 9 years. During my tenure here, I have learned great deal about software development and how to release software. When I first joined the DevOps team, I was involved in moving things out of the data center to AWS. I helped pioneer my company\u2019s first microservice infrastructure. I've seen us evolved from the data center to a cloud based infrastructure However after 9 years, I feel like I\u2019ve learned everything I need to know at my position. I want to expand myself and seek bigger challenges I am hoping that my next position will have more impact towards a larger audience. Especially with the products that I am building I am also seeking opportunities for leadership, which is critical in my career goals And, that's why I am leaving","title":"What are you planning to leave your current company?"},{"location":"WorkedWellTeam/","text":"Tell me about a time you worked well as a part of a team? Showed initiative Showed ownership Situation: Before I became a team lead, there was a time when my team took over another team\u2019s product. Since we took over, we now had to manage this product\u2019s infrastructure and deployments. The previous infrastructure code was maintained by a single engineer. Problem: The problem here was that the previous person hard coded many values and was using his own libraries. It was difficult to manage his code. Adding new features took a week instead of a day. That\u2019s because we had to first understand his code. Sometimes, we had to reachout to him to get more context. This cost a lot of labor hours Solution: I proposed to my team that we spend two weeks rewriting his infrastructure code. I believe that if we spend two weeks now, it would be easier for us down the road. I suggested to my team that we meet in a room everyday and spend 2 hours of uninterrupted time rewriting and re-building his previous code. I also had to negotiate with the development team to suspend their releases. I told them that they can benefit from this since releasing new features would be faster in the future. My team and the development team were on board. Impact: As a result of this effort, we were able to add new features within 2 days. The development team was able to have frequent release. All this happened because, we got together, refactored the code according to my team\u2019s standards Lesson: From this experience, I have learned that cost of maintaining poorly written code increases with time It's better to fix the issue as team early before it becomes much more complicated","title":"Tell me about a time you worked well as a part of a team?"},{"location":"WorkedWellTeam/#tell-me-about-a-time-you-worked-well-as-a-part-of-a-team","text":"","title":"Tell me about a time you worked well as a part of a team?"},{"location":"WorkedWellTeam/#showed-initiative","text":"","title":"Showed initiative"},{"location":"WorkedWellTeam/#showed-ownership","text":"","title":"Showed ownership"},{"location":"WorkedWellTeam/#situation","text":"Before I became a team lead, there was a time when my team took over another team\u2019s product. Since we took over, we now had to manage this product\u2019s infrastructure and deployments. The previous infrastructure code was maintained by a single engineer.","title":"Situation:"},{"location":"WorkedWellTeam/#problem","text":"The problem here was that the previous person hard coded many values and was using his own libraries. It was difficult to manage his code. Adding new features took a week instead of a day. That\u2019s because we had to first understand his code. Sometimes, we had to reachout to him to get more context. This cost a lot of labor hours","title":"Problem:"},{"location":"WorkedWellTeam/#solution","text":"I proposed to my team that we spend two weeks rewriting his infrastructure code. I believe that if we spend two weeks now, it would be easier for us down the road. I suggested to my team that we meet in a room everyday and spend 2 hours of uninterrupted time rewriting and re-building his previous code. I also had to negotiate with the development team to suspend their releases. I told them that they can benefit from this since releasing new features would be faster in the future. My team and the development team were on board.","title":"Solution:"},{"location":"WorkedWellTeam/#impact","text":"As a result of this effort, we were able to add new features within 2 days. The development team was able to have frequent release. All this happened because, we got together, refactored the code according to my team\u2019s standards","title":"Impact:"},{"location":"WorkedWellTeam/#lesson","text":"From this experience, I have learned that cost of maintaining poorly written code increases with time It's better to fix the issue as team early before it becomes much more complicated","title":"Lesson:"}]}